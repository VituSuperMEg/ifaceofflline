package com.example.iface_offilne.helpers

import android.content.Context
import android.util.Log
import com.example.iface_offilne.data.AppDatabase
import com.example.iface_offilne.data.FaceEntity
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext

/**
 * ‚úÖ VALIDADOR DE EMBEDDINGS
 * Verifica se todos os embeddings no banco est√£o consistentes
 */
class EmbeddingValidator(private val context: Context) {
    
    companion object {
        private const val TAG = "EmbeddingValidator"
        private const val EXPECTED_EMBEDDING_SIZE = 192 // ‚úÖ Tamanho padr√£o do modelo
    }
    
    /**
     * üîç VERIFICAR TODOS OS EMBEDDINGS NO BANCO
     */
    suspend fun validateAllEmbeddings(): ValidationReport {
        return withContext(Dispatchers.IO) {
            try {
                Log.d(TAG, "üîç === VALIDANDO TODOS OS EMBEDDINGS ===")
                
                val db = AppDatabase.getInstance(context)
                val faceDao = db.faceDao()
                val faces = faceDao.getAllFaces()
                
                Log.d(TAG, "üìä Total de faces no banco: ${faces.size}")
                
                val report = ValidationReport()
                
                for (face in faces) {
                    val faceValidation = validateSingleEmbedding(face)
                    report.addFaceValidation(faceValidation)
                }
                
                Log.d(TAG, "‚úÖ Valida√ß√£o conclu√≠da!")
                Log.d(TAG, "üìä Resultados:")
                Log.d(TAG, "   ‚úÖ V√°lidos: ${report.validFaces}")
                Log.d(TAG, "   ‚ùå Inv√°lidos: ${report.invalidFaces}")
                Log.d(TAG, "   ‚ö†Ô∏è Problemas: ${report.problems.size}")
                
                return@withContext report
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro na valida√ß√£o: ${e.message}", e)
                return@withContext ValidationReport().apply {
                    addError("Erro geral: ${e.message}")
                }
            }
        }
    }
    
    /**
     * üîç VALIDAR EMBEDDING INDIVIDUAL
     */
    suspend fun validateSingleEmbedding(face: FaceEntity): FaceValidationResult {
        return try {
            Log.d(TAG, "üîç Validando face ID: ${face.id}, Funcion√°rio: ${face.funcionarioId}")
            
            // Verificar se embedding n√£o est√° vazio
            if (face.embedding.isBlank()) {
                return FaceValidationResult(
                    faceId = face.id,
                    funcionarioId = face.funcionarioId,
                    isValid = false,
                    problem = "Embedding vazio"
                )
            }
            
            // Converter string para array
            val embeddingArray = try {
                face.embedding.split(",").map { it.toFloat() }.toFloatArray()
            } catch (e: Exception) {
                return FaceValidationResult(
                    faceId = face.id,
                    funcionarioId = face.funcionarioId,
                    isValid = false,
                    problem = "Erro ao converter embedding: ${e.message}"
                )
            }
            
            // Verificar tamanho
            if (embeddingArray.size != EXPECTED_EMBEDDING_SIZE) {
                return FaceValidationResult(
                    faceId = face.id,
                    funcionarioId = face.funcionarioId,
                    isValid = false,
                    problem = "Tamanho incorreto: ${embeddingArray.size} (esperado: $EXPECTED_EMBEDDING_SIZE)"
                )
            }
            
            // Verificar valores inv√°lidos
            val hasNaN = embeddingArray.any { it.isNaN() }
            val hasInf = embeddingArray.any { it.isInfinite() }
            val allZeros = embeddingArray.all { it == 0f }
            val allSame = embeddingArray.all { it == embeddingArray[0] }
            
            when {
                hasNaN -> {
                    return FaceValidationResult(
                        faceId = face.id,
                        funcionarioId = face.funcionarioId,
                        isValid = false,
                        problem = "Cont√©m valores NaN"
                    )
                }
                hasInf -> {
                    return FaceValidationResult(
                        faceId = face.id,
                        funcionarioId = face.funcionarioId,
                        isValid = false,
                        problem = "Cont√©m valores infinitos"
                    )
                }
                allZeros -> {
                    return FaceValidationResult(
                        faceId = face.id,
                        funcionarioId = face.funcionarioId,
                        isValid = false,
                        problem = "Todos os valores s√£o zero"
                    )
                }
                allSame -> {
                    return FaceValidationResult(
                        faceId = face.id,
                        funcionarioId = face.funcionarioId,
                        isValid = false,
                        problem = "Todos os valores s√£o id√™nticos"
                    )
                }
            }
            
            // Calcular estat√≠sticas
            val mean = embeddingArray.average().toFloat()
            val variance = embeddingArray.map { (it - mean) * (it - mean) }.average().toFloat()
            val magnitude = kotlin.math.sqrt(embeddingArray.map { it * it }.sum())
            
            Log.d(TAG, "‚úÖ Face ${face.funcionarioId} v√°lida:")
            Log.d(TAG, "   üìä Tamanho: ${embeddingArray.size}")
            Log.d(TAG, "   üìä M√©dia: $mean")
            Log.d(TAG, "   üìä Vari√¢ncia: $variance")
            Log.d(TAG, "   üìä Magnitude: $magnitude")
            
            return FaceValidationResult(
                faceId = face.id,
                funcionarioId = face.funcionarioId,
                isValid = true,
                problem = null,
                embeddingSize = embeddingArray.size,
                mean = mean,
                variance = variance,
                magnitude = magnitude
            )
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao validar face ${face.id}: ${e.message}")
            return FaceValidationResult(
                faceId = face.id,
                funcionarioId = face.funcionarioId,
                isValid = false,
                problem = "Erro: ${e.message}"
            )
        }
    }
    
    /**
     * üßπ LIMPAR EMBEDDINGS INV√ÅLIDOS
     */
    suspend fun cleanInvalidEmbeddings(): CleanupReport {
        return withContext(Dispatchers.IO) {
            try {
                Log.d(TAG, "üßπ === LIMPANDO EMBEDDINGS INV√ÅLIDOS ===")
                
                val validationReport = validateAllEmbeddings()
                val db = AppDatabase.getInstance(context)
                val faceDao = db.faceDao()
                
                val cleanupReport = CleanupReport()
                
                for (faceValidation in validationReport.faceValidations) {
                    if (!faceValidation.isValid) {
                        try {
                            faceDao.deleteByFuncionarioId(faceValidation.funcionarioId)
                            cleanupReport.addDeletedFace(faceValidation)
                            Log.d(TAG, "üóëÔ∏è Face deletada: ${faceValidation.funcionarioId} - ${faceValidation.problem}")
                        } catch (e: Exception) {
                            Log.e(TAG, "‚ùå Erro ao deletar face ${faceValidation.funcionarioId}: ${e.message}")
                            cleanupReport.addError("Erro ao deletar ${faceValidation.funcionarioId}: ${e.message}")
                        }
                    }
                }
                
                Log.d(TAG, "‚úÖ Limpeza conclu√≠da!")
                Log.d(TAG, "üìä Faces deletadas: ${cleanupReport.deletedFaces}")
                
                return@withContext cleanupReport
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro na limpeza: ${e.message}", e)
                return@withContext CleanupReport().apply {
                    addError("Erro geral: ${e.message}")
                }
            }
        }
    }
    
    /**
     * üõ°Ô∏è LIMPEZA MANUAL SEGURA: Remover apenas faces inv√°lidas espec√≠ficas
     */
    suspend fun cleanSpecificInvalidEmbeddings(funcionarioIds: List<String>): CleanupReport {
        return withContext(Dispatchers.IO) {
            try {
                Log.d(TAG, "üõ°Ô∏è === LIMPEZA MANUAL SEGURA DE EMBEDDINGS ===")
                Log.d(TAG, "üìã Funcion√°rios para verificar: ${funcionarioIds.joinToString(", ")}")
                
                val db = AppDatabase.getInstance(context)
                val faceDao = db.faceDao()
                
                val cleanupReport = CleanupReport()
                
                for (funcionarioId in funcionarioIds) {
                    try {
                        val face = faceDao.getByFuncionarioId(funcionarioId)
                        if (face != null) {
                            val faceValidation = validateSingleEmbedding(face)
                            
                            if (!faceValidation.isValid) {
                                Log.w(TAG, "‚ö†Ô∏è Face inv√°lida encontrada para $funcionarioId: ${faceValidation.problem}")
                                
                                // Confirmar antes de remover
                                faceDao.deleteByFuncionarioId(funcionarioId)
                                cleanupReport.addDeletedFace(faceValidation)
                                Log.d(TAG, "üóëÔ∏è Face inv√°lida removida: $funcionarioId")
                            } else {
                                Log.d(TAG, "‚úÖ Face v√°lida para $funcionarioId - mantida")
                            }
                        } else {
                            Log.d(TAG, "‚ÑπÔ∏è Nenhuma face encontrada para $funcionarioId")
                        }
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Erro ao processar funcion√°rio $funcionarioId: ${e.message}")
                        cleanupReport.addError("Erro ao processar $funcionarioId: ${e.message}")
                    }
                }
                
                Log.d(TAG, "‚úÖ Limpeza manual conclu√≠da!")
                Log.d(TAG, "üìä Faces removidas: ${cleanupReport.deletedFaces.size}")
                
                return@withContext cleanupReport
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro na limpeza manual: ${e.message}", e)
                return@withContext CleanupReport().apply {
                    addError("Erro geral: ${e.message}")
                }
            }
        }
    }
    
    /**
     * üìä RELAT√ìRIO DE VALIDA√á√ÉO
     */
    data class ValidationReport(
        val faceValidations: MutableList<FaceValidationResult> = mutableListOf(),
        val errors: MutableList<String> = mutableListOf()
    ) {
        val validFaces: Int get() = faceValidations.count { it.isValid }
        val invalidFaces: Int get() = faceValidations.count { !it.isValid }
        val problems: List<String> get() = faceValidations.filter { !it.isValid }.map { it.problem ?: "Problema desconhecido" }
        
        fun addFaceValidation(validation: FaceValidationResult) {
            faceValidations.add(validation)
        }
        
        fun addError(error: String) {
            errors.add(error)
        }
    }
    
    /**
     * üìä RESULTADO DE VALIDA√á√ÉO INDIVIDUAL
     */
    data class FaceValidationResult(
        val faceId: Int,
        val funcionarioId: String,
        val isValid: Boolean,
        val problem: String?,
        val embeddingSize: Int? = null,
        val mean: Float? = null,
        val variance: Float? = null,
        val magnitude: Float? = null
    )
    
    /**
     * üìä RELAT√ìRIO DE LIMPEZA
     */
    data class CleanupReport(
        val deletedFaces: MutableList<FaceValidationResult> = mutableListOf(),
        val errors: MutableList<String> = mutableListOf()
    ) {
        fun addDeletedFace(face: FaceValidationResult) {
            deletedFaces.add(face)
        }
        
        fun addError(error: String) {
            errors.add(error)
        }
    }
} 