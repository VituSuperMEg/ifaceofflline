package com.example.iface_offilne.helpers

import android.content.Context
import android.util.Log
import com.example.iface_offilne.data.AppDatabase
import com.example.iface_offilne.data.FaceEntity
import com.example.iface_offilne.data.FuncionariosEntity
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import kotlin.math.sqrt

class FaceRecognitionHelper(private val context: Context) {
    
    private val database = AppDatabase.getInstance(context)
    private val faceDao = database.faceDao()
    private val funcionarioDao = database.usuariosDao()
    
    // ‚ùå REMOVIDO: Cache problem√°tico que estava causando confus√£o
    // private var cachedFuncionarios: List<FuncionariosEntity>? = null
    // private var cacheTimestamp = 0L
    // private val cacheExpirationMs = 30000L // 30 segundos
    
    companion object {
        private const val TAG = "FaceRecognitionHelper"
        // ‚úÖ THRESHOLDS MUITO MAIS RIGOROSOS PARA EVITAR RECONHECIMENTOS ERRADOS
        private const val COSINE_THRESHOLD = 0.65f // Era 0.30f - MUITO MAIS RIGOROSO
        private const val FALLBACK_THRESHOLD = 0.55f // Era 0.20f - MUITO MAIS RIGOROSO
        private const val MIN_SCORE_DIFFERENCE = 0.15f // Era 0.05f - Diferen√ßa maior entre candidatos
        private const val HIGH_CONFIDENCE_THRESHOLD = 0.75f // Era 0.40f - MUITO MAIS RIGOROSO
        private const val DEBUG_MODE = true // Ativado para debug do problema
    }

    // ‚ùå REMOVIDO: Tracker problem√°tico que mantinha estado
    // private val matchTracker = FaceMatchTracker()
    
    /**
     * Compara um vetor facial com todos os rostos cadastrados no banco
     * e retorna o funcion√°rio correspondente se houver match
     */
    suspend fun recognizeFace(faceEmbedding: FloatArray): FuncionariosEntity? {
        return withContext(Dispatchers.IO) {
            try {
                // ‚úÖ CORRE√á√ÉO: Verificar se o vetor √© v√°lido (aceitar 192 ou 512)
                if (faceEmbedding.isEmpty() || (faceEmbedding.size != 192 && faceEmbedding.size != 512)) {
                    Log.e(TAG, "‚ùå Vetor facial inv√°lido: tamanho=${faceEmbedding.size} (esperado: 192 ou 512)")
                    return@withContext null
                }
                
                // ‚úÖ CORRE√á√ÉO: Verificar se o contexto ainda √© v√°lido
                if (context is android.app.Activity) {
                    val activity = context as android.app.Activity
                    if (activity.isFinishing || activity.isDestroyed) {
                        Log.w(TAG, "‚ö†Ô∏è Activity finalizada, cancelando reconhecimento")
                        return@withContext null
                    }
                }
                
                // ‚úÖ CORRE√á√ÉO: Tratar valores inv√°lidos em vez de falhar
                if (faceEmbedding.any { it.isNaN() || it.isInfinite() }) {
                    Log.w(TAG, "‚ö†Ô∏è Vetor facial cont√©m valores inv√°lidos - tentando corrigir...")
                    
                    val embeddingCorrigido = FloatArray(faceEmbedding.size) { index ->
                        val valor = faceEmbedding[index]
                        if (valor.isNaN() || valor.isInfinite()) {
                            0.0f // Substituir por 0
                        } else {
                            valor
                        }
                    }
                    
                    Log.d(TAG, "üîß Vetor corrigido com sucesso")
                    return@withContext recognizeFace(embeddingCorrigido) // Recurs√£o com vetor corrigido
                }
                
                if (DEBUG_MODE) {
                    Log.d(TAG, "üîç === INICIANDO RECONHECIMENTO FACIAL ===")
                    Log.d(TAG, "üîç Vetor de entrada: tamanho=${faceEmbedding.size}")
                }
                
                // ‚úÖ CORRE√á√ÉO: Sempre buscar funcion√°rios do banco (sem cache)
                val funcionarios = try {
                    funcionarioDao.getUsuario()
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå Erro ao buscar funcion√°rios: ${e.message}")
                    return@withContext null
                }
                if (DEBUG_MODE) Log.d(TAG, "üë• Total de funcion√°rios: ${funcionarios.size}")
                
                if (funcionarios.isEmpty()) {
                    if (DEBUG_MODE) Log.w(TAG, "‚ö†Ô∏è  Nenhum funcion√°rio cadastrado!")
                    return@withContext null
                }
                
                var bestMatch: FuncionariosEntity? = null
                var bestSimilarity = 0f
                var secondBestMatch: FuncionariosEntity? = null
                var secondBestSimilarity = 0f
                var thirdBestMatch: FuncionariosEntity? = null
                var thirdBestSimilarity = 0f
                
                // ‚úÖ CORRE√á√ÉO: Processamento sem cache
                for (funcionario in funcionarios) {
                    try {
                        // Buscar o rosto do funcion√°rio
                        val faceEntity = try {
                            faceDao.getByFuncionarioId(funcionario.codigo)
                        } catch (e: Exception) {
                            if (DEBUG_MODE) Log.w(TAG, "‚ö†Ô∏è Erro ao buscar face de ${funcionario.nome}: ${e.message}")
                            continue
                        }
                        
                        if (faceEntity != null) {
                            // ‚úÖ CORRE√á√ÉO: Verificar se o embedding √© v√°lido
                            if (faceEntity.embedding.isBlank()) {
                                if (DEBUG_MODE) Log.w(TAG, "‚ö†Ô∏è Embedding vazio para ${funcionario.nome}")
                                continue
                            }
                            
                            // Converter o embedding string para FloatArray
                            val storedEmbedding = try {
                                stringToFloatArray(faceEntity.embedding)
                            } catch (e: Exception) {
                                if (DEBUG_MODE) Log.w(TAG, "‚ö†Ô∏è Erro ao converter embedding de ${funcionario.nome}: ${e.message}")
                                continue
                            }
                            
                            // ‚úÖ CORRE√á√ÉO: Verificar se o embedding convertido √© v√°lido (aceitar 192 ou 512)
                            if (storedEmbedding.size != 192 && storedEmbedding.size != 512) {
                                if (DEBUG_MODE) Log.w(TAG, "‚ö†Ô∏è Embedding inv√°lido para ${funcionario.nome}: tamanho=${storedEmbedding.size}")
                                continue
                            }
                            
                            // ‚úÖ OTIMIZA√á√ÉO: Calcular apenas similaridade de cosseno
                            val cosineSimilarity = try {
                                calculateCosineSimilarity(faceEmbedding, storedEmbedding)
                            } catch (e: Exception) {
                                if (DEBUG_MODE) Log.w(TAG, "‚ö†Ô∏è Erro ao calcular similaridade para ${funcionario.nome}: ${e.message}")
                                continue
                            }
                            
                            if (DEBUG_MODE) {
                                val euclideanDistance = calculateEuclideanDistance(faceEmbedding, storedEmbedding)
                                Log.d(TAG, "üìä Funcion√°rio ${funcionario.nome}:")
                                Log.d(TAG, "   - Similaridade cosseno: $cosineSimilarity (limite: $COSINE_THRESHOLD)")
                                Log.d(TAG, "   - Dist√¢ncia euclidiana: $euclideanDistance")
                            }
                            
                            // ‚úÖ THRESHOLD OTIMIZADO: Usar novo valor mais rigoroso
                            if (cosineSimilarity >= COSINE_THRESHOLD) {
                                if (cosineSimilarity > bestSimilarity) {
                                    // Mover o anterior melhor para segundo lugar
                                    thirdBestMatch = secondBestMatch
                                    thirdBestSimilarity = secondBestSimilarity
                                    secondBestMatch = bestMatch
                                    secondBestSimilarity = bestSimilarity
                                    
                                    bestSimilarity = cosineSimilarity
                                    bestMatch = funcionario
                                    if (DEBUG_MODE) Log.d(TAG, "‚≠ê Novo melhor match: ${funcionario.nome} (similaridade: $cosineSimilarity)")
                                } else if (cosineSimilarity > secondBestSimilarity) {
                                    // Atualizar segundo melhor
                                    thirdBestMatch = secondBestMatch
                                    thirdBestSimilarity = secondBestSimilarity
                                    secondBestSimilarity = cosineSimilarity
                                    secondBestMatch = funcionario
                                    if (DEBUG_MODE) Log.d(TAG, "ü•à Segundo melhor match: ${funcionario.nome} (similaridade: $cosineSimilarity)")
                                } else if (cosineSimilarity > thirdBestSimilarity) {
                                    // Atualizar terceiro melhor
                                    thirdBestSimilarity = cosineSimilarity
                                    thirdBestMatch = funcionario
                                    if (DEBUG_MODE) Log.d(TAG, "ü•â Terceiro melhor match: ${funcionario.nome} (similaridade: $cosineSimilarity)")
                                }
                            }
                        }
                        
                    } catch (e: Exception) {
                        if (DEBUG_MODE) Log.w(TAG, "Erro ao processar funcion√°rio ${funcionario.nome}: ${e.message}")
                        // Continua para o pr√≥ximo funcion√°rio
                    }
                }
                
                var candidateMatch: FuncionariosEntity? = null
                var matchSimilarity = 0f

                if (bestMatch != null) {
                    Log.d(TAG, "‚úÖ Match encontrado: ${bestMatch.nome} (similaridade: $bestSimilarity)")
                    
                    // ‚úÖ VERIFICA√á√ÉO OTIMIZADA: An√°lise mais rigorosa para evitar confus√µes
                    if (secondBestMatch != null) {
                        val scoreDifference = bestSimilarity - secondBestSimilarity
                        
                        if (DEBUG_MODE) {
                            Log.d(TAG, "üìä An√°lise de diferen√ßas:")
                            Log.d(TAG, "   - Melhor: ${bestMatch.nome} (similaridade: $bestSimilarity)")
                            Log.d(TAG, "   - Segundo: ${secondBestMatch.nome} (similaridade: $secondBestSimilarity)")
                            Log.d(TAG, "   - Diferen√ßa: $scoreDifference (m√≠nima: $MIN_SCORE_DIFFERENCE)")
                            if (thirdBestMatch != null) {
                                Log.d(TAG, "   - Terceiro: ${thirdBestMatch.nome} (similaridade: $thirdBestSimilarity)")
                            }
                        }
                        
                        // ‚úÖ NOVA L√ìGICA: Verifica√ß√£o muito mais rigorosa para evitar confus√µes
                        if (bestSimilarity >= HIGH_CONFIDENCE_THRESHOLD) {
                            // Match de alta confian√ßa - aceitar apenas se for MUITO claro
                            if (scoreDifference >= MIN_SCORE_DIFFERENCE) {
                                candidateMatch = bestMatch
                                matchSimilarity = bestSimilarity
                                if (DEBUG_MODE) Log.d(TAG, "üöÄ Match de alta confian√ßa aceito: ${bestMatch.nome}")
                            } else {
                                if (DEBUG_MODE) Log.w(TAG, "‚ö†Ô∏è Alta similaridade mas diferen√ßa insuficiente - REJEITADO")
                                candidateMatch = null
                            }
                        } else if (scoreDifference >= MIN_SCORE_DIFFERENCE && bestSimilarity >= COSINE_THRESHOLD) {
                            // Diferen√ßa suficiente E similaridade boa - aceitar
                            candidateMatch = bestMatch
                            matchSimilarity = bestSimilarity
                            if (DEBUG_MODE) Log.d(TAG, "‚úÖ Match aceito com diferen√ßa suficiente")
                        } else {
                            // Qualquer d√∫vida - rejeitar para evitar erro
                            if (DEBUG_MODE) {
                                Log.w(TAG, "üö´ MATCH REJEITADO - Crit√©rios n√£o atendidos:")
                                Log.w(TAG, "   - Similaridade: $bestSimilarity (m√≠n: $COSINE_THRESHOLD)")
                                Log.w(TAG, "   - Diferen√ßa: $scoreDifference (m√≠n: $MIN_SCORE_DIFFERENCE)")
                                Log.w(TAG, "   - REJEITANDO para evitar reconhecimento errado")
                            }
                            candidateMatch = null
                        }
                    } else {
                        // Apenas um match - aceitar APENAS se for muito confi√°vel
                        if (bestSimilarity >= HIGH_CONFIDENCE_THRESHOLD) {
                            candidateMatch = bestMatch
                            matchSimilarity = bestSimilarity
                            if (DEBUG_MODE) Log.d(TAG, "‚úÖ Match √∫nico aceito com alta confian√ßa: ${bestMatch.nome}")
                        } else {
                            if (DEBUG_MODE) {
                                Log.w(TAG, "üö´ Match √∫nico REJEITADO - Similaridade baixa:")
                                Log.w(TAG, "   - Similaridade: $bestSimilarity (m√≠n: $HIGH_CONFIDENCE_THRESHOLD)")
                                Log.w(TAG, "   - REJEITANDO para evitar reconhecimento errado")
                            }
                            candidateMatch = null
                        }
                    }
                } else {
                    if (DEBUG_MODE) Log.d(TAG, "‚ùå Nenhum match encontrado")
                    
                    // ‚úÖ FALLBACK OTIMIZADO: Threshold mais rigoroso
                    if (DEBUG_MODE) Log.d(TAG, "üîÑ Tentando fallback com threshold mais rigoroso...")
                    
                    for (funcionario in funcionarios) {
                        try {
                            val faceEntity = faceDao.getByFuncionarioId(funcionario.codigo)
                            if (faceEntity != null) {
                                val storedEmbedding = stringToFloatArray(faceEntity.embedding)
                                val cosineSimilarity = calculateCosineSimilarity(faceEmbedding, storedEmbedding)
                                
                                if (cosineSimilarity >= FALLBACK_THRESHOLD) {
                                    Log.d(TAG, "üÜò Fallback: Match encontrado com threshold $FALLBACK_THRESHOLD")
                                    Log.d(TAG, "‚úÖ Funcion√°rio: ${funcionario.nome} (similaridade: $cosineSimilarity)")
                                    candidateMatch = funcionario
                                    matchSimilarity = cosineSimilarity
                                    break
                                }
                            }
                        } catch (e: Exception) {
                            if (DEBUG_MODE) Log.w(TAG, "Erro no fallback para ${funcionario.nome}: ${e.message}")
                        }
                    }
                }

                // ‚úÖ CORRE√á√ÉO: Retornar diretamente o match (sem tracker)
                if (candidateMatch != null) {
                    Log.d(TAG, "üéØ Match final confirmado: ${candidateMatch.nome} (similaridade: $matchSimilarity)")
                } else if (DEBUG_MODE) {
                    Log.d(TAG, "‚ùå Nenhum match encontrado ou confirmado")
                }
                
                return@withContext candidateMatch
                
            } catch (e: Exception) {
                Log.e(TAG, "Erro no reconhecimento facial: ${e.message}", e)
                null
            }
        }
    }
    
    /**
     * ‚úÖ CORRE√á√ÉO: Fun√ß√£o simplificada sem cache
     */
    private suspend fun getCachedFuncionarios(): List<FuncionariosEntity> {
        // Sempre buscar do banco para evitar problemas de cache
        return funcionarioDao.getUsuario()
    }
    
    /**
     * Converte uma string de embedding para FloatArray
     */
    private fun stringToFloatArray(embeddingString: String): FloatArray {
        try {
            // ‚úÖ CORRE√á√ÉO: Verificar se a string √© v√°lida
            if (embeddingString.isBlank()) {
                throw IllegalArgumentException("String de embedding vazia")
            }
            
            val values = embeddingString.split(",")
            
            // ‚úÖ CORRE√á√ÉO: Verificar se h√° valores suficientes (aceitar 192 ou 512)
            if (values.size != 192 && values.size != 512) {
                throw IllegalArgumentException("N√∫mero incorreto de valores: ${values.size} (esperado: 192 ou 512)")
            }
            
            // ‚úÖ CORRE√á√ÉO: Criar array do tamanho correto baseado nos valores
            val floatArray = FloatArray(values.size)
            for (i in values.indices) {
                try {
                    val value = values[i].trim().toFloat()
                    // ‚úÖ CORRE√á√ÉO: Verificar se o valor √© v√°lido
                    if (value.isNaN() || value.isInfinite()) {
                        throw IllegalArgumentException("Valor inv√°lido na posi√ß√£o $i: $value")
                    }
                    floatArray[i] = value
                } catch (e: NumberFormatException) {
                    throw IllegalArgumentException("Erro ao converter valor na posi√ß√£o $i: '${values[i]}'")
                }
            }
            
            return floatArray
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao converter string para FloatArray: ${e.message}")
            throw e
        }
    }
    
    /**
     * ‚úÖ OTIMIZADA: Calcula a similaridade de cosseno entre dois vetores
     */
    private fun calculateCosineSimilarity(vector1: FloatArray, vector2: FloatArray): Float {
        try {
            // ‚úÖ CORRE√á√ÉO: Verificar se os vetores s√£o v√°lidos
            if (vector1.isEmpty() || vector2.isEmpty()) {
                Log.w(TAG, "‚ö†Ô∏è Vetores vazios")
                return 0f
            }
            
            if (vector1.size != vector2.size) {
                if (DEBUG_MODE) Log.w(TAG, "‚ö†Ô∏è  Vetores t√™m tamanhos diferentes: ${vector1.size} vs ${vector2.size}")
                
                // ‚úÖ CORRE√á√ÉO: Aceitar vetores de 192 ou 512 dimens√µes
                if ((vector1.size != 192 && vector1.size != 512) || (vector2.size != 192 && vector2.size != 512)) {
                    Log.w(TAG, "‚ö†Ô∏è Vetores n√£o t√™m tamanho v√°lido: ${vector1.size} vs ${vector2.size}")
                    return 0f
                }
                
                // ‚úÖ CORRE√á√ÉO: Se tamanhos diferentes, usar o menor
                val minSize = minOf(vector1.size, vector2.size)
                if (minSize > 0) {
                    if (DEBUG_MODE) Log.d(TAG, "üîß Usando tamanho m√≠nimo: $minSize")
                    val v1 = vector1.sliceArray(0 until minSize)
                    val v2 = vector2.sliceArray(0 until minSize)
                    return calculateCosineSimilarityInternal(v1, v2)
                }
                return 0f
            }
            
            // ‚úÖ CORRE√á√ÉO: Verificar se h√° valores inv√°lidos
            if (vector1.any { it.isNaN() || it.isInfinite() } || vector2.any { it.isNaN() || it.isInfinite() }) {
                Log.w(TAG, "‚ö†Ô∏è Vetores cont√™m valores inv√°lidos")
                return 0f
            }
            
            return calculateCosineSimilarityInternal(vector1, vector2)
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao calcular similaridade: ${e.message}")
            return 0f
        }
    }
    
    private fun calculateCosineSimilarityInternal(vector1: FloatArray, vector2: FloatArray): Float {
        
        var dotProduct = 0f
        var magnitude1 = 0f
        var magnitude2 = 0f
        
        for (i in vector1.indices) {
            dotProduct += vector1[i] * vector2[i]
            magnitude1 += vector1[i] * vector1[i]
            magnitude2 += vector2[i] * vector2[i]
        }
        
        magnitude1 = sqrt(magnitude1)
        magnitude2 = sqrt(magnitude2)
        
        return if (magnitude1 != 0f && magnitude2 != 0f) {
            val similarity = dotProduct / (magnitude1 * magnitude2)
            // Converter para similaridade absoluta para facilitar compara√ß√£o
            kotlin.math.abs(similarity)
        } else {
            0f
        }
    }
    
    /**
     * Calcula a dist√¢ncia euclidiana entre dois vetores (m√©todo alternativo)
     */
    private fun calculateEuclideanDistance(vector1: FloatArray, vector2: FloatArray): Float {
        if (vector1.size != vector2.size) return Float.MAX_VALUE
        
        var sum = 0f
        for (i in vector1.indices) {
            val diff = vector1[i] - vector2[i]
            sum += diff * diff
        }
        
        return sqrt(sum)
    }
    
    /**
     * Limpa faces duplicadas ou incorretas do banco de dados
     */
    suspend fun limparFacesDuplicadas() {
        withContext(Dispatchers.IO) {
            try {
                if (DEBUG_MODE) Log.d(TAG, "üßπ === LIMPANDO FACES DUPLICADAS ===")
                
                val todasFaces = faceDao.getAllFaces()
                if (DEBUG_MODE) Log.d(TAG, "üìä Total de faces no banco: ${todasFaces.size}")
                
                val facesPorFuncionario = todasFaces.groupBy { it.funcionarioId }
                
                for ((funcionarioId, faces) in facesPorFuncionario) {
                    if (faces.size > 1) {
                        if (DEBUG_MODE) Log.w(TAG, "‚ö†Ô∏è  Funcion√°rio $funcionarioId tem ${faces.size} faces cadastradas!")
                        
                        // Manter apenas a face mais recente (maior ID)
                        val faceMaisRecente = faces.maxByOrNull { it.id }
                        
                        // Deletar as outras faces
                        for (face in faces) {
                            if (face.id != faceMaisRecente?.id) {
                                faceDao.delete(face)
                                if (DEBUG_MODE) Log.d(TAG, "üóëÔ∏è  Deletada face duplicada ID: ${face.id}")
                            }
                        }
                    }
                }
                
                // ‚úÖ OTIMIZA√á√ÉO: Limpar cache ap√≥s limpeza
                // cachedFuncionarios = null // REMOVIDO: Sem cache
                
                if (DEBUG_MODE) Log.d(TAG, "‚úÖ Limpeza de faces duplicadas conclu√≠da")
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao limpar faces duplicadas: ${e.message}", e)
            }
        }
    }
    
    /**
     * Verifica a integridade dos dados de faces
     */
    suspend fun verificarIntegridadeFaces() {
        withContext(Dispatchers.IO) {
            try {
                if (DEBUG_MODE) Log.d(TAG, "üîç === VERIFICANDO INTEGRIDADE DAS FACES ===")
                
                val funcionarios = getCachedFuncionarios()
                val todasFaces = faceDao.getAllFaces()
                
                if (DEBUG_MODE) {
                    Log.d(TAG, "üìä Total de funcion√°rios: ${funcionarios.size}")
                    Log.d(TAG, "üìä Total de faces: ${todasFaces.size}")
                }
                
                var funcionariosComFace = 0
                for (funcionario in funcionarios) {
                    val face = faceDao.getByFuncionarioId(funcionario.codigo)
                    if (face == null) {
                        if (DEBUG_MODE) Log.w(TAG, "‚ö†Ô∏è  Funcion√°rio ${funcionario.nome} (${funcionario.codigo}) n√£o possui face cadastrada")
                    } else {
                        funcionariosComFace++
                        if (DEBUG_MODE) Log.d(TAG, "‚úÖ Funcion√°rio ${funcionario.nome} (${funcionario.codigo}) possui face cadastrada")
                    }
                }
                
                Log.d(TAG, "‚úÖ Verifica√ß√£o conclu√≠da: $funcionariosComFace/${funcionarios.size} funcion√°rios com face cadastrada")
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao verificar integridade: ${e.message}", e)
            }
        }
    }

    /**
     * ‚úÖ OTIMIZADA: Testa o reconhecimento - vers√£o simplificada
     */
    suspend fun testarReconhecimento(faceEmbedding: FloatArray) {
        if (!DEBUG_MODE) return // S√≥ executa em modo debug
        
        withContext(Dispatchers.IO) {
            try {
                Log.d(TAG, "üß™ === TESTE DE RECONHECIMENTO ===")
                
                val funcionarios = getCachedFuncionarios()
                Log.d(TAG, "üë• Total de funcion√°rios: ${funcionarios.size}")
                
                val scores = mutableListOf<Pair<FuncionariosEntity, Float>>()
                
                for (funcionario in funcionarios) {
                    try {
                        val faceEntity = faceDao.getByFuncionarioId(funcionario.codigo)
                        if (faceEntity != null) {
                            val storedEmbedding = stringToFloatArray(faceEntity.embedding)
                            val cosineSimilarity = calculateCosineSimilarity(faceEmbedding, storedEmbedding)
                            
                            scores.add(Pair(funcionario, cosineSimilarity))
                            
                            Log.d(TAG, "üìä ${funcionario.nome}: $cosineSimilarity (threshold: $COSINE_THRESHOLD)")
                        }
                    } catch (e: Exception) {
                        Log.e(TAG, "Erro ao testar ${funcionario.nome}: ${e.message}")
                    }
                }
                
                // Ordenar por score
                scores.sortByDescending { it.second }
                
                Log.d(TAG, "üèÜ TOP 3 MATCHES:")
                scores.take(3).forEachIndexed { index, (funcionario, score) ->
                    val status = if (score >= COSINE_THRESHOLD) "‚úÖ" else "‚ùå"
                    Log.d(TAG, "${index + 1}. $status ${funcionario.nome}: $score")
                }
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro no teste de reconhecimento: ${e.message}", e)
            }
        }
    }

    /**
     * ‚úÖ NOVA FUN√á√ÉO: Verifica e corrige problemas de reconhecimento
     */
    suspend fun verificarECorrigirProblemasReconhecimento() {
        withContext(Dispatchers.IO) {
            try {
                Log.d(TAG, "üîß === VERIFICANDO E CORRIGINDO PROBLEMAS DE RECONHECIMENTO ===")
                
                // 1. Limpar faces duplicadas
                limparFacesDuplicadas()
                
                // 2. Verificar integridade
                verificarIntegridadeFaces()
                
                // 3. Verificar embeddings v√°lidos
                verificarEmbeddingsValidos()
                
                // 4. Limpar cache
                // cachedFuncionarios = null // REMOVIDO: Sem cache
                
                Log.d(TAG, "‚úÖ Verifica√ß√£o e corre√ß√£o conclu√≠da")
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro na verifica√ß√£o: ${e.message}", e)
            }
        }
    }
    
    /**
     * ‚úÖ NOVA FUN√á√ÉO: Verifica se os embeddings s√£o v√°lidos
     */
    private suspend fun verificarEmbeddingsValidos() {
        try {
            if (DEBUG_MODE) Log.d(TAG, "üîç === VERIFICANDO EMBEDDINGS V√ÅLIDOS ===")
            
            val todasFaces = faceDao.getAllFaces()
            var embeddingsInvalidos = 0
            var embeddingsCorrigidos = 0
            
            for (face in todasFaces) {
                try {
                    val embedding = stringToFloatArray(face.embedding)
                    
                    // Verificar se o embedding tem o tamanho correto (aceitar 192 ou 512)
                    if (embedding.size != 192 && embedding.size != 512) {
                        if (DEBUG_MODE) Log.w(TAG, "‚ö†Ô∏è Embedding inv√°lido para funcion√°rio ${face.funcionarioId}: tamanho=${embedding.size}")
                        embeddingsInvalidos++
                        
                        // Tentar corrigir se poss√≠vel
                        if (embedding.size > 0) {
                            val targetSize = if (embedding.size > 512) 512 else 192
                            val embeddingCorrigido = if (embedding.size > targetSize) {
                                embedding.sliceArray(0 until targetSize)
                            } else {
                                // Preencher com zeros se for menor
                                FloatArray(targetSize) { if (it < embedding.size) embedding[it] else 0f }
                            }
                            
                            val faceCorrigida = face.copy(embedding = embeddingCorrigido.joinToString(","))
                            faceDao.update(faceCorrigida)
                            embeddingsCorrigidos++
                            
                            if (DEBUG_MODE) Log.d(TAG, "‚úÖ Embedding corrigido para funcion√°rio ${face.funcionarioId}")
                        }
                    } else {
                        // Verificar se todos os valores s√£o n√∫meros v√°lidos
                        val temValoresInvalidos = embedding.any { it.isNaN() || it.isInfinite() }
                        if (temValoresInvalidos) {
                            if (DEBUG_MODE) Log.w(TAG, "‚ö†Ô∏è Embedding com valores inv√°lidos para funcion√°rio ${face.funcionarioId}")
                            embeddingsInvalidos++
                        }
                    }
                    
                } catch (e: Exception) {
                    if (DEBUG_MODE) Log.e(TAG, "‚ùå Erro ao verificar embedding do funcion√°rio ${face.funcionarioId}: ${e.message}")
                    embeddingsInvalidos++
                }
            }
            
            Log.d(TAG, "üìä Resultado da verifica√ß√£o de embeddings:")
            Log.d(TAG, "   - Total de faces: ${todasFaces.size}")
            Log.d(TAG, "   - Embeddings inv√°lidos: $embeddingsInvalidos")
            Log.d(TAG, "   - Embeddings corrigidos: $embeddingsCorrigidos")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao verificar embeddings: ${e.message}", e)
        }
    }
    
    /**
     * ‚úÖ NOVA FUN√á√ÉO: For√ßa recadastramento de face para um funcion√°rio
     */
    suspend fun forcarRecadastramento(funcionarioId: String) {
        withContext(Dispatchers.IO) {
            try {
                Log.d(TAG, "üîÑ === FOR√áANDO RECADASTRAMENTO PARA FUNCION√ÅRIO $funcionarioId ===")
                
                // Deletar face atual
                faceDao.deleteByFuncionarioId(funcionarioId)
                
                // Limpar cache
                // cachedFuncionarios = null // REMOVIDO: Sem cache
                
                Log.d(TAG, "‚úÖ Face deletada. Funcion√°rio deve recadastrar sua face.")
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao for√ßar recadastramento: ${e.message}", e)
            }
        }
    }
    
    /**
     * ‚úÖ NOVA FUN√á√ÉO: Lista funcion√°rios com problemas de reconhecimento
     */
    suspend fun listarFuncionariosComProblemas(): List<String> {
        return withContext(Dispatchers.IO) {
            try {
                val problemas = mutableListOf<String>()
                val funcionarios = getCachedFuncionarios()
                
                for (funcionario in funcionarios) {
                    val face = faceDao.getByFuncionarioId(funcionario.codigo)
                    if (face == null) {
                        problemas.add("‚ùå ${funcionario.nome}: Sem face cadastrada")
                    } else {
                        try {
                            val embedding = stringToFloatArray(face.embedding)
                            if (embedding.size != 192 && embedding.size != 512) {
                                problemas.add("‚ö†Ô∏è ${funcionario.nome}: Embedding inv√°lido (tamanho: ${embedding.size})")
                            }
                        } catch (e: Exception) {
                            problemas.add("‚ùå ${funcionario.nome}: Embedding corrompido")
                        }
                    }
                }
                
                if (DEBUG_MODE) {
                    Log.d(TAG, "üìã Funcion√°rios com problemas:")
                    problemas.forEach { Log.d(TAG, "   $it") }
                }
                
                problemas
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao listar problemas: ${e.message}", e)
                emptyList()
            }
        }
    }
} 