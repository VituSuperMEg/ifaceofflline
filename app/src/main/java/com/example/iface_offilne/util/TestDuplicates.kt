package com.example.iface_offilne.util

import android.content.Context
import android.util.Log
import com.example.iface_offilne.data.AppDatabase
import kotlinx.coroutines.runBlocking

/**
 * Classe utilit√°ria para testar funcionalidades de duplicatas via terminal
 */
object TestDuplicates {
    
    private const val TAG = "TestDuplicates"
    
    /**
     * Fun√ß√£o simples para testar via terminal ou logs
     */
    fun testDuplicateCheck(context: Context) {
        Log.d(TAG, "üîÑ Iniciando teste de verifica√ß√£o de duplicatas...")
        
        runBlocking {
            try {
                val result = DuplicatePointManager.forcarMarcacaoBatidasDuplicadas(context)
                
                Log.d(TAG, "‚úÖ Teste conclu√≠do:")
                Log.d(TAG, "  üìä Sucesso: ${result.success}")
                Log.d(TAG, "  üìä Total pendentes: ${result.totalPendentes}")
                Log.d(TAG, "  üìä Marcadas como sincronizadas: ${result.marcadasComoSincronizadas}")
                Log.d(TAG, "  üìä Mensagem: ${result.message}")
                
                if (result.batidasMarcadas.isNotEmpty()) {
                    Log.d(TAG, "  üìä Batidas marcadas:")
                    result.batidasMarcadas.forEach { batida ->
                        Log.d(TAG, "    - $batida")
                    }
                }
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro no teste: ${e.message}")
                e.printStackTrace()
            }
        }
    }
    
    /**
     * Fun√ß√£o para listar estat√≠sticas das batidas
     */
    fun logDuplicateStats(context: Context) {
        Log.d(TAG, "üìä Verificando estat√≠sticas de batidas...")
        
        runBlocking {
            try {
                val dao = AppDatabase.getInstance(context).pontosGenericosDao()
                
                val totalBatidas = dao.getAllPontos().size
                val batidasPendentes = dao.getPendingSync().size
                val batidasSincronizadas = totalBatidas - batidasPendentes
                
                Log.d(TAG, "üìä Estat√≠sticas:")
                Log.d(TAG, "  üìä Total de batidas: $totalBatidas")
                Log.d(TAG, "  üìä Batidas sincronizadas: $batidasSincronizadas")
                Log.d(TAG, "  üìä Batidas pendentes: $batidasPendentes")
                
                // Listar algumas batidas pendentes
                if (batidasPendentes > 0) {
                    Log.d(TAG, "  üìä Algumas batidas pendentes:")
                    dao.getPendingSync().take(5).forEach { batida ->
                        Log.d(TAG, "    - ${batida.funcionarioNome} - ${batida.tipoPonto} - ${java.util.Date(batida.dataHora)}")
                    }
                }
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao obter estat√≠sticas: ${e.message}")
                e.printStackTrace()
            }
        }
    }
} 