package com.example.iface_offilne.service

import android.content.Context
import android.util.Log
import com.example.iface_offilne.data.AppDatabase
import com.example.iface_offilne.data.HistoricoSincronizacaoEntity
import com.example.iface_offilne.data.PontoSincronizacaoEntity
import com.example.iface_offilne.data.dao.PontosGenericosDao
import com.example.iface_offilne.data.api.RetrofitClient
import com.example.iface_offilne.util.ConfiguracoesManager
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.text.SimpleDateFormat
import java.util.*

class PontoSincronizacaoService {
    
    companion object {
        private const val TAG = "SYNC_DEBUG"
    }

    // Salvar ponto no Room para sincroniza√ß√£o posterior
    suspend fun salvarPontoParaSincronizacao(
        context: Context,
        funcionarioId: String,
        funcionarioNome: String,
        tipo: String, // "entrada" ou "saida"
        fotoBase64: String? = null, // üÜï Foto da batida em base64
        latitude: Double? = null, // ‚úÖ NOVA: Latitude
        longitude: Double? = null // ‚úÖ NOVA: Longitude
    ) {
        withContext(Dispatchers.IO) {
            try {
                val database = AppDatabase.getInstance(context)
                val pontoDao = database.pontoSincronizacaoDao()
                val funcionarioDao = database.funcionarioDao()
                
                // Obter configura√ß√µes atuais
                val localizacaoId = ConfiguracoesManager.getLocalizacaoId(context)
                val codigoSincronizacao = ConfiguracoesManager.getCodigoSincronizacao(context)
                
                // Buscar informa√ß√µes completas do funcion√°rio
                val funcionario = funcionarioDao.getById(funcionarioId.toIntOrNull() ?: 0)
                
                // Formatar data/hora atual
                val sdf = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault())
                val dataHora = sdf.format(Date())
                
                // Criar entidade do ponto com informa√ß√µes completas
                val ponto = PontoSincronizacaoEntity(
                    funcionarioId = funcionarioId,
                    funcionarioNome = funcionarioNome,
                    funcionarioMatricula = funcionario?.matricula ?: "",
                    funcionarioCpf = funcionario?.cpf ?: "",
                    funcionarioCargo = funcionario?.cargo ?: "",
                    funcionarioSecretaria = funcionario?.secretaria ?: "",
                    funcionarioLotacao = funcionario?.lotacao ?: "",
                    dataHora = dataHora,
                    tipo = tipo,
                    sincronizado = false,
                    localizacaoId = localizacaoId,
                    codigoSincronizacao = codigoSincronizacao,
                    fotoBase64 = fotoBase64, // üÜï Incluir foto
                    latitude = latitude, // ‚úÖ NOVA: Incluir latitude
                    longitude = longitude // ‚úÖ NOVA: Incluir longitude
                )
                
                // Salvar no Room
                pontoDao.insertPonto(ponto)
                
                Log.d(TAG, "‚úÖ Ponto salvo para sincroniza√ß√£o: $funcionarioId - $tipo - $dataHora")
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao salvar ponto para sincroniza√ß√£o: ${e.message}")
                throw e
            }
        }
    }

    // Sincronizar pontos pendentes
    suspend fun sincronizarPontosPendentes(context: Context): SincronizacaoResult {
        return withContext(Dispatchers.IO) {
            val tempoInicio = System.currentTimeMillis()
            
            try {
                Log.d(TAG, "üöÄ === INICIANDO SINCRONIZA√á√ÉO REAL ===")
                
                // ‚úÖ VERIFICA√á√ÉO PRIORIT√ÅRIA: Entidade configurada
                val entidadeAtual = com.example.iface_offilne.util.SessionManager.entidade
                if (entidadeAtual == null || entidadeAtual.id.isEmpty()) {
                    Log.e(TAG, "‚ùå === ERRO CR√çTICO: ENTIDADE N√ÉO CONFIGURADA ===")
                    Log.e(TAG, "  üî¥ SessionManager.entidade: $entidadeAtual")
                    Log.e(TAG, "  üí° SOLU√á√ÉO: Usu√°rio deve ir em configura√ß√µes e selecionar uma entidade")
                    Log.e(TAG, "  üìç Sem entidade, a API retornar√° erro 400 'Cliente n√£o configurado'")
                    return@withContext SincronizacaoResult(false, 0, 0, "‚ùå Entidade n√£o configurada. V√° em configura√ß√µes e selecione uma entidade.")
                }
                
                Log.d(TAG, "‚úÖ Entidade configurada:")
                Log.d(TAG, "  üÜî ID: '${entidadeAtual.id}'")
                Log.d(TAG, "  üìù Nome: '${entidadeAtual.name}'")
                
                val database = AppDatabase.getInstance(context)
                val pontoDao = database.pontoSincronizacaoDao()
                val pontosGenericosDao = database.pontosGenericosDao()
                val configuracoesDao = database.configuracoesDao()
                
                // Verificar se h√° configura√ß√µes
                Log.d(TAG, "üîç Verificando configura√ß√µes...")
                val configuracoes = configuracoesDao.getConfiguracoes()
                if (configuracoes == null) {
                    Log.w(TAG, "‚ö†Ô∏è Configura√ß√µes n√£o encontradas")
                    return@withContext SincronizacaoResult(false, 0, 0, "Configura√ß√µes n√£o encontradas")
                }
                
                Log.d(TAG, "‚úÖ Configura√ß√µes encontradas:")
                Log.d(TAG, "  üìç Localiza√ß√£o ID: '${configuracoes.localizacaoId}'")
                Log.d(TAG, "  üîë C√≥digo: '${configuracoes.codigoSincronizacao}'")
                
                // Verificar se as configura√ß√µes est√£o v√°lidas
                if (configuracoes.localizacaoId.isEmpty() || configuracoes.codigoSincronizacao.isEmpty()) {
                    Log.e(TAG, "‚ùå Configura√ß√µes inv√°lidas!")
                    return@withContext SincronizacaoResult(false, 0, 0, "Configura√ß√µes de localiza√ß√£o/c√≥digo n√£o preenchidas")
                }
                
                // ‚úÖ CORRIGIDO: Buscar pontos de AMBAS as tabelas
                Log.d(TAG, "üîç Buscando pontos de ambas as tabelas...")
                
                // üîÑ NOVO: Verificar e marcar batidas duplicadas primeiro
                Log.d(TAG, "üîç Verificando batidas duplicadas que j√° foram subidas...")
                verificarEMarcarBatidasDuplicadas(pontosGenericosDao)
                
                // 1. Pontos da tabela de sincroniza√ß√£o espec√≠fica
                val pontosSincronizacao = pontoDao.getPontosNaoSincronizados()
                Log.d(TAG, "üìä Pontos da tabela sincroniza√ß√£o: ${pontosSincronizacao.size}")
                
                // 2. Pontos da tabela gen√©rica (reconhecimento facial) que n√£o foram sincronizados
                val pontosGenericos = pontosGenericosDao.getPendingSync()
                Log.d(TAG, "üìä Pontos da tabela gen√©rica (ap√≥s verifica√ß√£o de duplicatas): ${pontosGenericos.size}")
                
                // 3. Converter pontos gen√©ricos para formato de sincroniza√ß√£o
                val pontosGenericosConvertidos = pontosGenericos.map { pontoGenerico ->
                    PontoSincronizacaoEntity(
                        funcionarioId = pontoGenerico.funcionarioId,
                        funcionarioNome = pontoGenerico.funcionarioNome,
                        funcionarioMatricula = pontoGenerico.funcionarioMatricula,
                        funcionarioCpf = pontoGenerico.funcionarioCpf,
                        funcionarioCargo = pontoGenerico.funcionarioCargo,
                        funcionarioSecretaria = pontoGenerico.funcionarioSecretaria,
                        funcionarioLotacao = pontoGenerico.funcionarioLotacao,
                        dataHora = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault()).format(Date(pontoGenerico.dataHora)),
                        tipo = pontoGenerico.tipoPonto.lowercase(), // "PONTO" -> "ponto"
                        sincronizado = false,
                        localizacaoId = configuracoes.localizacaoId,
                        codigoSincronizacao = configuracoes.codigoSincronizacao,
                        fotoBase64 = pontoGenerico.fotoBase64 // üÜï Incluir foto
                    )
                }
                
                // 4. Unir todos os pontos para sincronizar
                val todosPontos = pontosSincronizacao + pontosGenericosConvertidos
                
                if (todosPontos.isEmpty()) {
                    Log.d(TAG, "‚ÑπÔ∏è Nenhum ponto pendente para sincroniza√ß√£o")
                    return@withContext SincronizacaoResult(true, 0, 0, "Nenhum ponto pendente para sincroniza√ß√£o")
                }
                
                Log.d(TAG, "üìä Total de pontos para sincronizar: ${todosPontos.size}")
                Log.d(TAG, "  üîπ Da tabela sincroniza√ß√£o: ${pontosSincronizacao.size}")
                Log.d(TAG, "  üîπ Da tabela gen√©rica: ${pontosGenericosConvertidos.size}")
                
                todosPontos.forEachIndexed { index, ponto ->
                    Log.d(TAG, "  üîπ [$index] ${ponto.funcionarioNome} - ${ponto.tipo} - ${ponto.dataHora}")
                }
                
                Log.d(TAG, "üîÑ Iniciando sincroniza√ß√£o de ${todosPontos.size} pontos...")
                
                // ‚úÖ IMPLEMENTA√á√ÉO REAL DA API
                val sucesso = enviarPontosParaAPI(context, todosPontos, configuracoes)
                
                val duracaoSegundos = (System.currentTimeMillis() - tempoInicio) / 1000
                Log.d(TAG, "‚è±Ô∏è Dura√ß√£o da sincroniza√ß√£o: ${duracaoSegundos}s")
                
                if (sucesso) {
                    // Marcar pontos como sincronizados em AMBAS as tabelas
                    Log.d(TAG, "‚úÖ Marcando pontos como sincronizados...")
                    val sdf = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault())
                    val dataSincronizacao = sdf.format(Date())
                    
                    // Marcar pontos da tabela de sincroniza√ß√£o
                    if (pontosSincronizacao.isNotEmpty()) {
                        val idsPontosSincronizacao = pontosSincronizacao.map { it.id }
                        Log.d(TAG, "üîÑ Marcando ${idsPontosSincronizacao.size} pontos da tabela sincroniza√ß√£o")
                        pontoDao.marcarMultiplosComoSincronizados(idsPontosSincronizacao, dataSincronizacao)
                    }
                    
                    // Marcar pontos da tabela gen√©rica
                    if (pontosGenericos.isNotEmpty()) {
                        Log.d(TAG, "üîÑ Marcando ${pontosGenericos.size} pontos da tabela gen√©rica")
                        for (pontoGenerico in pontosGenericos) {
                            pontosGenericosDao.markAsSynced(pontoGenerico.id)
                        }
                    }
                    
                    Log.d(TAG, "‚úÖ ${todosPontos.size} pontos sincronizados com sucesso")
                    Log.d(TAG, "üöÄ === SINCRONIZA√á√ÉO CONCLU√çDA COM SUCESSO ===")
                    SincronizacaoResult(true, todosPontos.size, duracaoSegundos, "${todosPontos.size} pontos sincronizados com sucesso")
                } else {
                    Log.e(TAG, "‚ùå Falha na sincroniza√ß√£o dos pontos")
                    Log.d(TAG, "üöÄ === SINCRONIZA√á√ÉO FALHOU ===")
                    SincronizacaoResult(false, todosPontos.size, duracaoSegundos, "Falha na sincroniza√ß√£o com a API")
                }
                
            } catch (e: Exception) {
                val duracaoSegundos = (System.currentTimeMillis() - tempoInicio) / 1000
                Log.e(TAG, "‚ùå Erro na sincroniza√ß√£o: ${e.message}")
                e.printStackTrace()
                Log.d(TAG, "üöÄ === SINCRONIZA√á√ÉO COM ERRO ===")
                SincronizacaoResult(false, 0, duracaoSegundos, "Erro na sincroniza√ß√£o: ${e.message}")
            }
        }
    }

    /**
     * ‚úÖ NOVA IMPLEMENTA√á√ÉO: Envio real para a API
     * Baseado no formato JSON fornecido pelo usu√°rio
     */
    private suspend fun enviarPontosParaAPI(
        context: Context,
        pontos: List<PontoSincronizacaoEntity>,
        configuracoes: com.example.iface_offilne.data.ConfiguracoesEntity
    ): Boolean {
        return withContext(Dispatchers.IO) {
            try {
                Log.d(TAG, "üì§ === ENVIANDO PARA API REAL ===")
                
                // Preparar dados no formato que a API espera
                val pontosFormatados = pontos.map { ponto ->
                    mapOf(
                        "id" to ponto.id.toString(),
                        "funcionario_id" to ponto.funcionarioId,
                        "funcionario_nome" to ponto.funcionarioNome,
                        "funcionario_matricula" to ponto.funcionarioMatricula,
                        "funcionario_cpf" to ponto.funcionarioCpf,
                        "funcionario_cargo" to ponto.funcionarioCargo,
                        "funcionario_secretaria" to ponto.funcionarioSecretaria,
                        "funcionario_lotacao" to ponto.funcionarioLotacao,
                        "data_hora" to ponto.dataHora
                    )
                }
                
                // Montar payload no formato esperado pela API
                val payload = mapOf(
                    "localizacao_id" to configuracoes.localizacaoId,
                    "codigo_sincronizacao" to configuracoes.codigoSincronizacao,
                    "data_sincronizacao" to SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault()).format(Date()),
                    "pontos" to pontosFormatados
                )
                
                Log.d(TAG, "üì¶ === PAYLOAD COMPLETO ===")
                Log.d(TAG, "  üìç Localiza√ß√£o ID: '${payload["localizacao_id"]}'")
                Log.d(TAG, "  üîë C√≥digo: '${payload["codigo_sincronizacao"]}'")
                Log.d(TAG, "  üìä Quantidade de pontos: ${pontosFormatados.size}")
                Log.d(TAG, "  üìÖ Data sincroniza√ß√£o: '${payload["data_sincronizacao"]}'")
                
                // ‚úÖ NOVO: Mostrar JSON completo formatado
                Log.d(TAG, "üìã === JSON COMPLETO DA REQUEST ===")
                val jsonString = buildString {
                    appendLine("{")
                    appendLine("  \"localizacao_id\": \"${payload["localizacao_id"]}\",")
                    appendLine("  \"codigo_sincronizacao\": \"${payload["codigo_sincronizacao"]}\",")
                    appendLine("  \"data_sincronizacao\": \"${payload["data_sincronizacao"]}\",")
                    appendLine("  \"pontos\": [")
                    
                    pontosFormatados.forEachIndexed { index, ponto ->
                        appendLine("    {")
                        appendLine("      \"id\": \"${ponto["id"]}\",")
                        appendLine("      \"funcionario_id\": \"${ponto["funcionario_id"]}\",")
                        appendLine("      \"funcionario_nome\": \"${ponto["funcionario_nome"]}\",")
                        appendLine("      \"funcionario_matricula\": \"${ponto["funcionario_matricula"]}\",")
                        appendLine("      \"funcionario_cpf\": \"${ponto["funcionario_cpf"]}\",")
                        appendLine("      \"funcionario_cargo\": \"${ponto["funcionario_cargo"]}\",")
                        appendLine("      \"funcionario_secretaria\": \"${ponto["funcionario_secretaria"]}\",")
                        appendLine("      \"funcionario_lotacao\": \"${ponto["funcionario_lotacao"]}\",")
                        appendLine("      \"data_hora\": \"${ponto["data_hora"]}\"")
                        if (index < pontosFormatados.size - 1) {
                            appendLine("    },")
                        } else {
                            appendLine("    }")
                        }
                    }
                    
                    appendLine("  ]")
                    appendLine("}")
                }
                
                Log.d(TAG, jsonString)
                Log.d(TAG, "üìã === FIM DO JSON ===")
                
                // ‚úÖ NOVO: Mostrar detalhes de cada ponto individualmente
                Log.d(TAG, "üîç === DETALHES DE CADA PONTO ===")
                pontosFormatados.forEachIndexed { index, ponto ->
                    Log.d(TAG, "Ponto #${index + 1}:")
                    ponto.forEach { (chave, valor) ->
                        Log.d(TAG, "  $chave: '$valor'")
                    }
                    Log.d(TAG, "  ---")
                }
                
                // Fazer chamada para a API
                Log.d(TAG, "üåê === FAZENDO CHAMADA HTTP ===")
                
                try {
                    // ‚úÖ CORRIGIDO: Obter entidade do SessionManager
                    val entidade = com.example.iface_offilne.util.SessionManager.entidade?.id
                    
                    if (entidade.isNullOrEmpty()) {
                        Log.e(TAG, "‚ùå === ERRO: ENTIDADE N√ÉO CONFIGURADA ===")
                        Log.e(TAG, "  üî¥ SessionManager.entidade √© null ou vazio")
                        Log.e(TAG, "  üí° Usu√°rio precisa selecionar uma entidade primeiro")
                        Log.e(TAG, "  üìç V√° em configura√ß√µes e selecione a entidade")
                        return@withContext false
                    }
                    
                    Log.d(TAG, "üîó URL da API: /$entidade/services/util/sincronizar-ponto-table")
                    Log.d(TAG, "üîó Entidade corrigida: '$entidade'")
                    Log.d(TAG, "üîó SessionManager.entidade.name: '${com.example.iface_offilne.util.SessionManager.entidade?.name}'")
                    
                                    // ‚úÖ CORRE√á√ÉO: Converter pontos para o formato da API com geolocaliza√ß√£o
                val pontosParaAPI = pontos.map { ponto ->
                    com.example.iface_offilne.data.api.PontoSyncRequest(
                        funcionarioId = ponto.funcionarioId,
                        funcionarioNome = ponto.funcionarioNome,
                        dataHora = ponto.dataHora,
                        tipoPonto = ponto.tipo.uppercase(), // "PONTO"
                        latitude = ponto.latitude, // ‚úÖ NOVA: Incluir latitude
                        longitude = ponto.longitude, // ‚úÖ NOVA: Incluir longitude
                        fotoBase64 = ponto.fotoBase64 // üÜï Incluir foto
                    )
                }
                    
                    // ‚úÖ NOVO: Criar request completo com configura√ß√µes no n√≠vel raiz
                    val requestCompleto = com.example.iface_offilne.data.api.PontoSyncCompleteRequest(
                        localizacao_id = configuracoes.localizacaoId,
                        cod_sincroniza = configuracoes.codigoSincronizacao,
                        pontos = pontosParaAPI
                    )
                    
                    // ‚úÖ NOVO: Mostrar formato completo para API
                    Log.d(TAG, "üìã === FORMATO COMPLETO PARA API ===")
                    Log.d(TAG, "  localizacao_id: '${requestCompleto.localizacao_id}'")
                    Log.d(TAG, "  cod_sincroniza: '${requestCompleto.cod_sincroniza}'")
                    Log.d(TAG, "  pontos: ${requestCompleto.pontos.size} pontos")
                    
                    requestCompleto.pontos.forEachIndexed { index, pontoAPI ->
                        Log.d(TAG, "Ponto API #${index + 1}:")
                        Log.d(TAG, "  funcionarioId: '${pontoAPI.funcionarioId}'")
                        Log.d(TAG, "  funcionarioNome: '${pontoAPI.funcionarioNome}'")
                        Log.d(TAG, "  dataHora: '${pontoAPI.dataHora}'")
                        Log.d(TAG, "  tipoPonto: '${pontoAPI.tipoPonto}'")
                        Log.d(TAG, "  latitude: ${pontoAPI.latitude}")
                        Log.d(TAG, "  longitude: ${pontoAPI.longitude}")
                        Log.d(TAG, "  observacao: '${pontoAPI.observacao}'")
                        Log.d(TAG, "  fotoBase64: ${if (pontoAPI.fotoBase64?.isNotEmpty() == true) "‚úÖ Presente (${pontoAPI.fotoBase64.length} chars)" else "‚ùå Ausente"}")
                        Log.d(TAG, "  ---")
                    }
                    
                    val apiService = RetrofitClient.instance
                    Log.d(TAG, "üîÑ Executando chamada HTTP com formato completo...")
                    
                    // ‚úÖ NOVO: Usar o novo endpoint com formato completo
                    val response = apiService.sincronizarPontosCompleto(entidade, requestCompleto)
                    
                    Log.d(TAG, "üì° === RESPOSTA DA API ===")
                    Log.d(TAG, "  üìà Status Code: ${response.code()}")
                    Log.d(TAG, "  ‚úÖ Sucesso: ${response.isSuccessful}")
                    
                    if (response.isSuccessful) {
                        val responseBody = response.body()
                        Log.d(TAG, "  üìù Response Body: $responseBody")
                        
                        if (responseBody != null) {
                            Log.d(TAG, "  üéØ Success: ${responseBody.success}")
                            Log.d(TAG, "  üí¨ Message: '${responseBody.message}'")
                            Log.d(TAG, "  üìä Pontos Sincronizados: ${responseBody.pontosSincronizados}")
                        }
                        
                        Log.d(TAG, "‚úÖ API respondeu com sucesso!")
                        true
                    } else {
                        val errorBody = response.errorBody()?.string()
                        Log.e(TAG, "‚ùå API retornou erro: ${response.code()}")
                        Log.e(TAG, "  üìù Error Body: $errorBody")
                        Log.e(TAG, "  üìù Error Message: ${response.message()}")
                        
                        // üîÑ NOVO: Detectar erros de duplicata e marcar como sincronizadas
                        if (response.code() == 400 && errorBody != null) {
                            return@withContext tratarErroDuplicata(context, errorBody, pontos, pontosParaAPI)
                        }
                        
                        // ‚úÖ AN√ÅLISE espec√≠fica do erro 400 (outros casos)
                        if (response.code() == 400 && errorBody?.contains("Cliente n√£o configurado") == true) {
                            Log.e(TAG, "  üî¥ ERRO ESPEC√çFICO: Cliente n√£o configurado")
                            Log.e(TAG, "  üí° SOLU√á√ÉO: Verificar se a entidade '$entidade' est√° correta")
                            Log.e(TAG, "  üí° DICA: V√° em configura√ß√µes e selecione novamente a entidade")
                        }
                        
                        false
                    }
                    
                } catch (networkException: Exception) {
                    Log.e(TAG, "‚ùå === ERRO DE REDE ===")
                    Log.e(TAG, "  üî¥ Tipo: ${networkException.javaClass.simpleName}")
                    Log.e(TAG, "  üí¨ Mensagem: ${networkException.message}")
                    Log.e(TAG, "  üìç Stack Trace:")
                    networkException.printStackTrace()
                    
                    // ‚úÖ FALLBACK: Tentar sincroniza√ß√£o alternativa se a API principal falhar
                    Log.d(TAG, "üîÑ === DADOS QUE SERIAM ENVIADOS (FALLBACK) ===")
                    Log.d(TAG, "üìã JSON que seria enviado:")
                    Log.d(TAG, jsonString)
                    
                    false
                }
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå === ERRO GERAL ===")
                Log.e(TAG, "  üî¥ Tipo: ${e.javaClass.simpleName}")
                Log.e(TAG, "  üí¨ Mensagem: ${e.message}")
                Log.e(TAG, "  üìç Stack Trace:")
                e.printStackTrace()
                false
            }
        }
    }

    // Preparar dados para sincroniza√ß√£o (m√©todo legado - mantido para compatibilidade)
    private fun prepararDadosSincronizacao(
        pontos: List<PontoSincronizacaoEntity>,
        configuracoes: com.example.iface_offilne.data.ConfiguracoesEntity
    ): Map<String, Any> {
        
        Log.d(TAG, "üîß === PREPARANDO DADOS PARA SINCRONIZA√á√ÉO ===")
        Log.d(TAG, "üìä Quantidade de pontos: ${pontos.size}")
        Log.d(TAG, "‚öôÔ∏è Configura√ß√µes:")
        Log.d(TAG, "  üìç Localiza√ß√£o ID: '${configuracoes.localizacaoId}'")
        Log.d(TAG, "  üîë C√≥digo Sincroniza√ß√£o: '${configuracoes.codigoSincronizacao}'")
        
        val pontosData = pontos.mapIndexed { index, ponto ->
            Log.d(TAG, "üîπ Ponto [$index]:")
            Log.d(TAG, "  üë§ Funcion√°rio: ${ponto.funcionarioNome} (ID: ${ponto.funcionarioId})")
            Log.d(TAG, "  üìã Matr√≠cula: ${ponto.funcionarioMatricula}")
            Log.d(TAG, "  üìÑ CPF: ${ponto.funcionarioCpf}")
            Log.d(TAG, "  üíº Cargo: ${ponto.funcionarioCargo}")
            Log.d(TAG, "  üè¢ Secretaria: ${ponto.funcionarioSecretaria}")
            Log.d(TAG, "  üìç Lota√ß√£o: ${ponto.funcionarioLotacao}")
            Log.d(TAG, "  üìÖ Data/Hora: ${ponto.dataHora}")
            Log.d(TAG, "  üîÑ Tipo: ${ponto.tipo}")
            Log.d(TAG, "  üîó Sincronizado: ${ponto.sincronizado}")
            
            val pontoMap = mapOf(
                "id" to ponto.id,
                "funcionario_id" to ponto.funcionarioId,
                "funcionario_nome" to ponto.funcionarioNome,
                "funcionario_matricula" to ponto.funcionarioMatricula,
                "funcionario_cpf" to ponto.funcionarioCpf,
                "funcionario_cargo" to ponto.funcionarioCargo,
                "funcionario_secretaria" to ponto.funcionarioSecretaria,
                "funcionario_lotacao" to ponto.funcionarioLotacao,
                "data_hora" to ponto.dataHora,
                "tipo" to ponto.tipo,
                "localizacao_id" to ponto.localizacaoId,
                "codigo_sincronizacao" to ponto.codigoSincronizacao
            )
            
            Log.d(TAG, "  ‚úÖ Ponto mapeado: $pontoMap")
            pontoMap
        }
        
        val dadosFinais = mapOf(
            "localizacao_id" to configuracoes.localizacaoId,
            "codigo_sincronizacao" to configuracoes.codigoSincronizacao,
            "pontos" to pontosData,
            "data_sincronizacao" to SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault()).format(Date())
        )
        
        Log.d(TAG, "üîß === DADOS PREPARADOS COM SUCESSO ===")
        return dadosFinais
    }

    // Enviar dados para API (m√©todo legado - removido pois foi substitu√≠do)
    // ... c√≥digo removido ...

    // Obter quantidade de pontos pendentes
    suspend fun getQuantidadePontosPendentes(context: Context): Int {
        return withContext(Dispatchers.IO) {
            try {
                val database = AppDatabase.getInstance(context)
                val pontoDao = database.pontoSincronizacaoDao()
                val pontosGenericosDao = database.pontosGenericosDao()
                
                // ‚úÖ CORRIGIDO: Contar pontos de AMBAS as tabelas
                val pontosSincronizacao = pontoDao.getQuantidadePontosNaoSincronizados()
                val pontosGenericos = pontosGenericosDao.getPendingSync().size
                
                val total = pontosSincronizacao + pontosGenericos
                
                Log.d(TAG, "üìä Pontos pendentes:")
                Log.d(TAG, "  üîπ Tabela sincroniza√ß√£o: $pontosSincronizacao")
                Log.d(TAG, "  üîπ Tabela gen√©rica: $pontosGenericos")
                Log.d(TAG, "  üîπ Total: $total")
                
                total
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao obter quantidade de pontos pendentes: ${e.message}")
                0
            }
        }
    }

    // Limpar pontos sincronizados antigos (manuten√ß√£o)
    suspend fun limparPontosAntigos(context: Context, diasParaManter: Int = 30) {
        withContext(Dispatchers.IO) {
            try {
                val database = AppDatabase.getInstance(context)
                val pontoDao = database.pontoSincronizacaoDao()
                
                // Calcular data limite
                val calendar = Calendar.getInstance()
                calendar.add(Calendar.DAY_OF_YEAR, -diasParaManter)
                val sdf = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault())
                val dataLimite = sdf.format(calendar.time)
                
                // Limpar pontos antigos
                val pontosRemovidos = pontoDao.limparPontosSincronizadosAntigos(dataLimite)
                
                Log.d(TAG, "üóëÔ∏è Removidos $pontosRemovidos pontos antigos (anteriores a $dataLimite)")
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao limpar pontos antigos: ${e.message}")
            }
        }
    }

    // Sincronizar pontos pendentes com registro no hist√≥rico
    suspend fun sincronizarPontosPendentesComHistorico(context: Context, tipoSincronizacao: String) {
        withContext(Dispatchers.IO) {
            try {
                // Registrar in√≠cio da sincroniza√ß√£o
                registrarHistorico(context, "EM_ANDAMENTO", "$tipoSincronizacao iniciada", 0, 0)
                
                // Executar sincroniza√ß√£o
                val resultado = sincronizarPontosPendentes(context)
                
                // Registrar resultado no hist√≥rico
                if (resultado.sucesso) {
                    registrarHistorico(context, "SUCESSO", resultado.mensagem, resultado.quantidadePontos, resultado.duracaoSegundos)
                } else {
                    registrarHistorico(context, "ERRO", resultado.mensagem, resultado.quantidadePontos, resultado.duracaoSegundos)
                }
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro na sincroniza√ß√£o: ${e.message}")
                registrarHistorico(context, "ERRO", "Erro na $tipoSincronizacao: ${e.message}", 0, 0)
            }
        }
    }

    // Registrar no hist√≥rico
    private fun registrarHistorico(context: Context, status: String, mensagem: String, quantidadePontos: Int, duracaoSegundos: Long) {
        CoroutineScope(Dispatchers.IO).launch {
            try {
                val database = AppDatabase.getInstance(context)
                val historicoDao = database.historicoSincronizacaoDao()
                
                val historico = HistoricoSincronizacaoEntity(
                    dataHora = Date(),
                    status = status,
                    mensagem = mensagem,
                    quantidadePontos = quantidadePontos,
                    duracaoSegundos = duracaoSegundos
                )
                
                historicoDao.insertSincronizacao(historico)
                Log.d(TAG, "üìù Hist√≥rico registrado: $status - $mensagem")
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao registrar hist√≥rico: ${e.message}")
            }
        }
    }

    // M√©todo para criar pontos de teste (apenas para debug)
    suspend fun criarPontoTeste(context: Context) {
        withContext(Dispatchers.IO) {
            try {
                val database = AppDatabase.getInstance(context)
                val pontoDao = database.pontoSincronizacaoDao()
                
                // Formatar data/hora atual
                val sdf = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault())
                val dataHora = sdf.format(Date())
                
                // Criar ponto de teste
                val pontoTeste = PontoSincronizacaoEntity(
                    funcionarioId = "00905076303", // Usando o CPF do exemplo
                    funcionarioNome = "ADAMS ANTONIO GIRAO MENESES", // Nome do exemplo
                    funcionarioMatricula = "100001", // Matr√≠cula do exemplo
                    funcionarioCpf = "00905076303",
                    funcionarioCargo = "Analista",
                    funcionarioSecretaria = "SEAD",
                    funcionarioLotacao = "Diretoria",
                    dataHora = dataHora,
                    tipo = "ponto",
                    sincronizado = false,
                    localizacaoId = ConfiguracoesManager.getLocalizacaoId(context),
                    codigoSincronizacao = ConfiguracoesManager.getCodigoSincronizacao(context)
                )
                
                pontoDao.insertPonto(pontoTeste)
                Log.d(TAG, "‚úÖ Ponto de teste criado: $dataHora")
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao criar ponto de teste: ${e.message}")
            }
        }
    }
    
    /**
     * Verifica e marca como sincronizadas as batidas que podem ter sido subidas anteriormente
     * mas n√£o foram marcadas devido a problemas de sincroniza√ß√£o
     */
    private suspend fun verificarEMarcarBatidasDuplicadas(pontosGenericosDao: PontosGenericosDao) {
        try {
            Log.d(TAG, "üîç Iniciando verifica√ß√£o de batidas duplicadas...")
            
            // Buscar todas as batidas pendentes
            val pontosPendentes = pontosGenericosDao.getPendingSync()
            Log.d(TAG, "üìä Total de batidas pendentes para verificar: ${pontosPendentes.size}")
            
            var marcadasComoSincronizadas = 0
            
            // Para cada batida pendente, verificar se j√° existe uma similar que foi sincronizada
            for (pontoPendente in pontosPendentes) {
                val duplicata = pontosGenericosDao.findDuplicateSync(
                    funcionarioId = pontoPendente.funcionarioId,
                    tipoPonto = pontoPendente.tipoPonto,
                    dataHora = pontoPendente.dataHora,
                    toleranciaMs = 300000 // 5 minutos de toler√¢ncia
                )
                
                if (duplicata != null) {
                    Log.d(TAG, "üîÑ Batida duplicada encontrada:")
                    Log.d(TAG, "  üìç Funcion√°rio: ${pontoPendente.funcionarioNome}")
                    Log.d(TAG, "  üìç Tipo: ${pontoPendente.tipoPonto}")
                    Log.d(TAG, "  üìç Data pendente: ${Date(pontoPendente.dataHora)}")
                    Log.d(TAG, "  üìç Data sincronizada: ${Date(duplicata.dataHora)}")
                    
                    // Marcar a batida pendente como sincronizada
                    pontosGenericosDao.markAsSynced(pontoPendente.id)
                    marcadasComoSincronizadas++
                    
                    Log.d(TAG, "‚úÖ Batida marcada como sincronizada (ID: ${pontoPendente.id})")
                }
            }
            
            if (marcadasComoSincronizadas > 0) {
                Log.d(TAG, "‚úÖ Total de batidas marcadas como sincronizadas: $marcadasComoSincronizadas")
            } else {
                Log.d(TAG, "‚ÑπÔ∏è Nenhuma batida duplicada encontrada")
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao verificar batidas duplicadas: ${e.message}")
            e.printStackTrace()
        }
    }
    
    /**
     * Trata erros de duplicata do servidor e marca as batidas como sincronizadas
     * @param context Contexto da aplica√ß√£o
     * @param errorBody Corpo da resposta de erro da API
     * @param pontosOriginais Lista de pontos que foram enviados
     * @param pontosParaAPI Lista de pontos no formato da API
     * @return true se conseguiu tratar o erro, false caso contr√°rio
     */
    private suspend fun tratarErroDuplicata(
        context: Context,
        errorBody: String,
        pontosOriginais: List<PontoSincronizacaoEntity>,
        pontosParaAPI: List<com.example.iface_offilne.data.api.PontoSyncRequest>
    ): Boolean = withContext(Dispatchers.IO) {
        try {
            Log.d(TAG, "üîç === ANALISANDO ERRO DE DUPLICATA ===")
            
            // Verificar se √© erro de chave duplicada
            val isDuplicateError = errorBody.contains("duplicate key value violates unique constraint") ||
                                 errorBody.contains("Unique violation") ||
                                 errorBody.contains("already exists") ||
                                 errorBody.contains("SQLSTATE[23505]")
            
            if (isDuplicateError) {
                Log.d(TAG, "üéØ DETECTADO: Erro de batida duplicada no servidor!")
                Log.d(TAG, "üîÑ Marcando batidas como sincronizadas automaticamente...")
                
                val pontosGenericosDao = AppDatabase.getInstance(context).pontosGenericosDao()
                val pontoDao = AppDatabase.getInstance(context).pontoSincronizacaoDao()
                
                var batidasMarcadas = 0
                
                // Extrair informa√ß√µes da batida duplicada do erro (se poss√≠vel)
                val regex = """\(data_ponto, funcionario_vinculo_id\)=\(([^,]+), (\d+)\)""".toRegex()
                val matchResult = regex.find(errorBody)
                
                if (matchResult != null) {
                    val dataHoraDuplicada = matchResult.groupValues[1]
                    val funcionarioId = matchResult.groupValues[2]
                    
                    Log.d(TAG, "üìä Batida duplicada identificada:")
                    Log.d(TAG, "  üìÖ Data/Hora: $dataHoraDuplicada")
                    Log.d(TAG, "  üë§ Funcion√°rio ID: $funcionarioId")
                    
                    // Marcar especificamente esta batida como sincronizada
                    val formato = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault())
                    try {
                        val dataHoraTimestamp = formato.parse(dataHoraDuplicada)?.time ?: 0L
                        
                        // Buscar na tabela gen√©rica
                        val pontosGenericos = pontosGenericosDao.getPendingSync()
                        pontosGenericos.forEach { ponto ->
                            if (ponto.funcionarioId == funcionarioId && 
                                Math.abs(ponto.dataHora - dataHoraTimestamp) <= 60000) { // 1 minuto de toler√¢ncia
                                pontosGenericosDao.markAsSynced(ponto.id)
                                batidasMarcadas++
                                Log.d(TAG, "‚úÖ Batida gen√©rica marcada: ${ponto.funcionarioNome} - ${Date(ponto.dataHora)}")
                            }
                        }
                        
                        // Buscar na tabela de sincroniza√ß√£o
                        val pontosSincronizacao = pontoDao.getPontosNaoSincronizados()
                        val sdf = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault())
                        pontosSincronizacao.forEach { ponto ->
                            try {
                                val pontoTimestamp = sdf.parse(ponto.dataHora)?.time ?: 0L
                                if (ponto.funcionarioId == funcionarioId && 
                                    Math.abs(pontoTimestamp - dataHoraTimestamp) <= 60000) {
                                    pontoDao.marcarComoSincronizado(ponto.id, sdf.format(Date()))
                                    batidasMarcadas++
                                    Log.d(TAG, "‚úÖ Batida sincroniza√ß√£o marcada: ${ponto.funcionarioNome} - ${ponto.dataHora}")
                                }
                            } catch (e: Exception) {
                                Log.e(TAG, "‚ùå Erro ao processar ponto sincroniza√ß√£o: ${e.message}")
                            }
                        }
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Erro ao converter data: ${e.message}")
                    }
                }
                
                // Se n√£o conseguiu identificar especificamente, marcar todas as batidas enviadas
                if (batidasMarcadas == 0) {
                    Log.d(TAG, "‚ö†Ô∏è N√£o foi poss√≠vel identificar batida espec√≠fica, marcando todas as enviadas...")
                    
                    // Marcar pontos gen√©ricos enviados
                    pontosOriginais.forEach { pontoOriginal ->
                        try {
                            // Converter data do formato da sincroniza√ß√£o para timestamp
                            val formato = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault())
                            val timestamp = formato.parse(pontoOriginal.dataHora)?.time ?: 0L
                            
                            val pontosGenericos = pontosGenericosDao.getPendingSync()
                            pontosGenericos.forEach { pontoGenerico ->
                                if (pontoGenerico.funcionarioId == pontoOriginal.funcionarioId &&
                                    Math.abs(pontoGenerico.dataHora - timestamp) <= 300000) { // 5 minutos
                                    pontosGenericosDao.markAsSynced(pontoGenerico.id)
                                    batidasMarcadas++
                                    Log.d(TAG, "‚úÖ Batida marcada (fallback): ${pontoGenerico.funcionarioNome}")
                                }
                            }
                        } catch (e: Exception) {
                            Log.e(TAG, "‚ùå Erro ao processar ponto: ${e.message}")
                        }
                    }
                    
                    // Marcar pontos de sincroniza√ß√£o enviados
                    val pontosSincronizacao = pontoDao.getPontosNaoSincronizados()
                    pontosOriginais.forEach { pontoOriginal ->
                        pontosSincronizacao.forEach { pontoSync ->
                            if (pontoSync.funcionarioId == pontoOriginal.funcionarioId &&
                                pontoSync.dataHora == pontoOriginal.dataHora) {
                                pontoDao.marcarComoSincronizado(pontoSync.id, SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault()).format(Date()))
                                batidasMarcadas++
                                Log.d(TAG, "‚úÖ Ponto sincroniza√ß√£o marcado (fallback): ${pontoSync.funcionarioNome}")
                            }
                        }
                    }
                }
                
                if (batidasMarcadas > 0) {
                    Log.d(TAG, "üéâ === DUPLICATAS RESOLVIDAS AUTOMATICAMENTE ===")
                    Log.d(TAG, "‚úÖ $batidasMarcadas batidas foram marcadas como sincronizadas")
                    Log.d(TAG, "üí° Problema: Essas batidas j√° existiam no servidor")
                    Log.d(TAG, "üí° Solu√ß√£o: Marcadas localmente para evitar reenvio")
                    return@withContext true
                } else {
                    Log.e(TAG, "‚ùå N√£o foi poss√≠vel identificar batidas duplicadas")
                    return@withContext false
                }
            } else {
                Log.e(TAG, "‚ùå Erro n√£o √© de duplicata, mantendo como falha")
                return@withContext false
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao tratar duplicata: ${e.message}")
            e.printStackTrace()
            return@withContext false
        }
    }
} 