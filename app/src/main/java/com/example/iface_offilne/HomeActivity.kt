package com.example.iface_offilne

import android.content.Intent
import android.os.Bundle
import android.util.Log
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.example.iface_offilne.databinding.ActivityHomeBinding
import com.example.iface_offilne.helpers.PermissaoHelper
import com.example.iface_offilne.service.SincronizacaoService
import com.example.iface_offilne.util.ConfiguracoesManager
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

class HomeActivity : AppCompatActivity() {

    private lateinit var binding: ActivityHomeBinding
    private val TAG = "HomeActivity"

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        binding = ActivityHomeBinding.inflate(layoutInflater)
        setContentView(binding.root)

        // ‚úÖ NOVO: Configurar alarme de sincroniza√ß√£o automaticamente
        configurarAlarmeSincronizacaoAutomatico()

        // ‚úÖ NOVO: Sistema de permiss√µes implementado com tratamento robusto
        val permissaoHelper = PermissaoHelper(this)
        
        // Card Usu√°rios
        binding.cardUsuarios.setOnClickListener {
                permissaoHelper.verificarPermissaoFuncionarios {
                    val screen = Intent(this@HomeActivity, UsuariosActivity::class.java)
                    startActivity(screen)
            }
        }

        // Card Funcion√°rios
        binding.cardFuncionarios.setOnClickListener {
                permissaoHelper.verificarPermissaoFuncionarios {
                    val screen = Intent(this@HomeActivity, FuncionariosActivity::class.java)
                    startActivity(screen)
            }
        }

        // Card Registrar Ponto
        binding.cardRegistrarPonto.setOnClickListener {
                permissaoHelper.verificarPermissaoPontos {
                    val screen = Intent(this@HomeActivity, FaceRecognitionActivity::class.java)
                    startActivity(screen)
            }
        }

        // Card Visualizar Pontos (Relat√≥rios)
        binding.cardVisualizarPontos.setOnClickListener {
                permissaoHelper.verificarPermissaoRelatorios {
                    val screen = Intent(this@HomeActivity, VisualizarPontosActivity::class.java)
                    startActivity(screen)
            }
        }

        // Card Configura√ß√µes
        binding.cardConfiguracoes.setOnClickListener {
                permissaoHelper.verificarPermissaoConfiguracoes {
                    val screen = Intent(this@HomeActivity, ConfiguracoesActivity::class.java)
                    startActivity(screen)
            }
        }
    }

    /**
     * ‚úÖ NOVO: Configura o alarme de sincroniza√ß√£o automaticamente quando o app inicia
     * Verifica se a sincroniza√ß√£o est√° ativa e configura o alarme se necess√°rio
     */
    private fun configurarAlarmeSincronizacaoAutomatico() {
        Log.d(TAG, "üîß === CONFIGURANDO ALARME DE SINCRONIZA√á√ÉO AUTOM√ÅTICO ===")
        
        CoroutineScope(Dispatchers.IO).launch {
            try {
                // Verificar se a sincroniza√ß√£o est√° ativa
                val sincronizacaoAtiva = ConfiguracoesManager.isSincronizacaoAtiva(this@HomeActivity)
                val intervalo = ConfiguracoesManager.getIntervaloSincronizacao(this@HomeActivity)
                
                Log.d(TAG, "üîç Status da sincroniza√ß√£o: ativa=$sincronizacaoAtiva, intervalo=${intervalo}h")
                
                if (sincronizacaoAtiva) {
                    Log.d(TAG, "‚úÖ Sincroniza√ß√£o ativa - configurando alarme automaticamente")
                    
                    // Configurar alarme
                    val sincronizacaoService = SincronizacaoService()
                    sincronizacaoService.configurarAlarme(this@HomeActivity, 0, 0, intervalo)
                    
                    // Verificar status do alarme
                    sincronizacaoService.verificarStatusAlarme(this@HomeActivity)
                    
                    Log.d(TAG, "‚úÖ Alarme de sincroniza√ß√£o configurado automaticamente para $intervalo hora(s)")
                } else {
                    Log.d(TAG, "‚ÑπÔ∏è Sincroniza√ß√£o desativada - alarme n√£o configurado")
                }
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao configurar alarme autom√°tico: ${e.message}")
                e.printStackTrace()
            }
        }
    }



    override fun onResume() {
        super.onResume()
        
        // ‚úÖ NOVO: Verificar status do alarme quando voltar para a tela
        verificarStatusAlarmeSincronizacao()
    }
    
    /**
     * ‚úÖ NOVO: Verifica o status do alarme de sincroniza√ß√£o
     */
    private fun verificarStatusAlarmeSincronizacao() {
        Log.d(TAG, "üîç === VERIFICANDO STATUS DO ALARME NA TELA PRINCIPAL ===")
        
        CoroutineScope(Dispatchers.IO).launch {
            try {
                val sincronizacaoAtiva = ConfiguracoesManager.isSincronizacaoAtiva(this@HomeActivity)
                val intervalo = ConfiguracoesManager.getIntervaloSincronizacao(this@HomeActivity)
                
                Log.d(TAG, "üìä Status: ativa=$sincronizacaoAtiva, intervalo=${intervalo}h")
                
                if (sincronizacaoAtiva) {
                    val sincronizacaoService = SincronizacaoService()
                    sincronizacaoService.verificarStatusAlarme(this@HomeActivity)
                }
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao verificar status do alarme: ${e.message}")
            }
        }
    }
}