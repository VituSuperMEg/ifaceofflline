package com.example.iface_offilne

import android.Manifest
import android.app.AlertDialog
import android.content.Intent
import android.content.pm.PackageManager
import android.graphics.*
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.util.Log
import android.view.View
import android.widget.*
import androidx.appcompat.app.AppCompatActivity
import androidx.camera.core.*
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import com.example.iface_offilne.data.AppDatabase
import com.example.iface_offilne.data.FuncionariosEntity
import com.example.iface_offilne.data.PontosGenericosEntity
import com.example.iface_offilne.service.PontoSincronizacaoService
import com.example.iface_offilne.helpers.FaceRecognitionHelper
import com.example.iface_offilne.helpers.LocationHelper
import com.example.iface_offilne.helpers.bitmapToBase64
import com.example.iface_offilne.helpers.bitmapToFloatArray
import com.example.iface_offilne.helpers.cropFace
import com.example.iface_offilne.helpers.fixImageOrientationDefinitive
import com.example.iface_offilne.helpers.toBitmap
import com.example.iface_offilne.databinding.ActivityPontoBinding
import com.example.iface_offilne.util.FaceOverlayView
import com.google.mlkit.vision.common.InputImage
import com.google.mlkit.vision.face.FaceDetection
import com.google.mlkit.vision.face.FaceDetectorOptions
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import kotlinx.coroutines.delay
import kotlinx.coroutines.withTimeout
import org.tensorflow.lite.Interpreter
import java.io.FileInputStream
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.channels.FileChannel
import java.text.SimpleDateFormat
import java.util.*
import kotlinx.coroutines.TimeoutCancellationException

class PontoActivity : AppCompatActivity() {

    private lateinit var binding: ActivityPontoBinding
    private lateinit var previewView: PreviewView
    private lateinit var imageAnalyzer: ImageAnalysis
    private lateinit var overlay: FaceOverlayView
    private lateinit var statusText: TextView
    private lateinit var funcionarioInfo: LinearLayout
    private lateinit var funcionarioNome: TextView
    private lateinit var ultimoPonto: TextView
    private lateinit var tipoPontoRadioGroup: RadioGroup

    private var interpreter: Interpreter? = null
    private var modelLoaded = false
    private var modelInputWidth = 160
    private var modelInputHeight = 160
    private var modelOutputSize = 512 // ‚úÖ CORRE√á√ÉO: Ajustar para o tamanho real do modelo

    private var faceRecognitionHelper: com.example.iface_offilne.helpers.FaceRecognitionHelper? = null
    private var locationHelper: LocationHelper? = null
    private var funcionarioReconhecido: FuncionariosEntity? = null
    private var processandoFace = false
    private var currentFaceBitmap: Bitmap? = null // Para armazenar a foto da face
    private var cameraProvider: ProcessCameraProvider? = null // ‚úÖ NOVO: Refer√™ncia para limpar camera
    private var lastProcessingTime = 0L // ‚úÖ NOVA: Controle de timeout
    private var processingTimeout = 5000L // ‚úÖ OTIMIZA√á√ÉO: 5 segundos de timeout
    private var pontoJaRegistrado = false // ‚úÖ NOVA: Controle para evitar registros duplicados
    private var ultimoFuncionarioReconhecido: String? = null // ‚úÖ NOVA: Controle do √∫ltimo funcion√°rio
    
    // ‚úÖ SISTEMA DE TIMEOUT MELHORADO: Mais est√°vel e robusto
    private var lastFaceDetectionTime = 0L // √öltima vez que detectou uma face
    private var noFaceTimeout = 300000L // ‚úÖ CORRE√á√ÉO: 5 minutos sem detectar face (aumentado)
    private var activityStartTime = 0L // Tempo de in√≠cio da activity
    private var maxActivityTime = 600000L // ‚úÖ CORRE√á√ÉO: 10 minutos m√°ximo na tela (aumentado)
    private var timeoutPausado = false // Para pausar timeout durante processamento importante
    private var monitorHandler: Handler? = null // ‚úÖ NOVA: Handler dedicado para controle

    companion object {
        private const val REQUEST_CODE_PERMISSIONS = 10
        private const val REQUEST_CODE_LOCATION_PERMISSIONS = 20
        private val REQUIRED_PERMISSIONS = arrayOf(Manifest.permission.CAMERA)
        private val LOCATION_PERMISSIONS = arrayOf(
            Manifest.permission.ACCESS_FINE_LOCATION,
            Manifest.permission.ACCESS_COARSE_LOCATION
        )
        private const val TAG = "PontoActivity"
        
        // ‚úÖ NOVA: Fun√ß√£o para monitorar mem√≥ria
        private fun logMemoryUsage(context: String) {
            try {
                val runtime = Runtime.getRuntime()
                val usedMemory = runtime.totalMemory() - runtime.freeMemory()
                val maxMemory = runtime.maxMemory()
                val percentUsed = (usedMemory * 100) / maxMemory
                
                Log.d(TAG, "üß† Mem√≥ria [$context]: ${usedMemory/1024/1024}MB/${maxMemory/1024/1024}MB (${percentUsed}%)")
                
                if (percentUsed > 80) {
                    Log.w(TAG, "‚ö†Ô∏è ATEN√á√ÉO: Uso de mem√≥ria alto (${percentUsed}%)")
                    System.gc() // For√ßar garbage collection
                }
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao verificar mem√≥ria: ${e.message}")
            }
        }
    }

    private var faceDetector = FaceDetection.getClient(
        FaceDetectorOptions.Builder()
            .setPerformanceMode(FaceDetectorOptions.PERFORMANCE_MODE_FAST)
            .setLandmarkMode(FaceDetectorOptions.LANDMARK_MODE_NONE)
            .setClassificationMode(FaceDetectorOptions.CLASSIFICATION_MODE_NONE)
            .build()
    )

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        // Inicializar binding
        binding = ActivityPontoBinding.inflate(layoutInflater)
        setContentView(binding.root)
        
        // Configurar para uso completo da tela
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {
            window.statusBarColor = ContextCompat.getColor(this, android.R.color.transparent)
            window.navigationBarColor = ContextCompat.getColor(this, android.R.color.transparent)
        }
        
        setupUI()
        
        // ‚úÖ CORRE√á√ÉO: Resetar estado AP√ìS setupUI
        resetarEstadoReconhecimento()
        
        // ‚úÖ CORRE√á√ÉO: Garantir que processandoFace come√ßa como false
        processandoFace = false
        lastProcessingTime = 0L // ‚úÖ NOVA: Garantir que o tempo tamb√©m come√ßa zerado
        pontoJaRegistrado = false // ‚úÖ NOVA: Garantir que n√£o h√° registro pendente
        ultimoFuncionarioReconhecido = null // ‚úÖ NOVA: Limpar √∫ltimo funcion√°rio
        
        // ‚úÖ NOVO: Inicializar tempos de timeout
        activityStartTime = System.currentTimeMillis()
        lastFaceDetectionTime = System.currentTimeMillis()
        
        Log.d(TAG, "üöÄ === INICIANDO SISTEMA DE PONTO ===")
        Log.d(TAG, "üìä Estado inicial: processandoFace = $processandoFace, lastProcessingTime = $lastProcessingTime")
        Log.d(TAG, "‚è±Ô∏è Timeout configurado: ${noFaceTimeout/1000}s sem face, ${maxActivityTime/1000}s m√°ximo total")
        Log.d(TAG, "üì∏ Sistema de captura de foto RESTAURADO - fotos ser√£o enviadas com os pontos")
        
        // ‚úÖ OTIMIZA√á√ÉO: Monitorar mem√≥ria inicial
        logMemoryUsage("Inicializa√ß√£o")

        // ‚úÖ OTIMIZA√á√ÉO: Inicializar helper de reconhecimento facial com tratamento de erro
        try {
            faceRecognitionHelper = com.example.iface_offilne.helpers.FaceRecognitionHelper(this)
            Log.d(TAG, "‚úÖ Face recognition helper inicializado")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao inicializar face recognition helper: ${e.message}")
            // Tentar inicializar novamente ap√≥s um delay
            Handler(Looper.getMainLooper()).postDelayed({
                try {
                    faceRecognitionHelper = com.example.iface_offilne.helpers.FaceRecognitionHelper(this)
                    Log.d(TAG, "‚úÖ Face recognition helper inicializado na segunda tentativa")
                } catch (e2: Exception) {
                    Log.e(TAG, "‚ùå Falha na segunda tentativa: ${e2.message}")
                }
            }, 2000)
        }
        
        // ‚úÖ OTIMIZA√á√ÉO: Inicializar helper de localiza√ß√£o com tratamento de erro
        try {
            locationHelper = LocationHelper(this)
            Log.d(TAG, "‚úÖ Location helper inicializado")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao inicializar location helper: ${e.message}")
            // Tentar inicializar novamente ap√≥s um delay
            Handler(Looper.getMainLooper()).postDelayed({
                try {
                    locationHelper = LocationHelper(this)
                    Log.d(TAG, "‚úÖ Location helper inicializado na segunda tentativa")
                } catch (e2: Exception) {
                    Log.e(TAG, "‚ùå Falha na segunda tentativa: ${e2.message}")
                }
            }, 2000)
        }
        
        // ‚úÖ OTIMIZA√á√ÉO: Limpar cache inicial para garantir dados atualizados
        faceRecognitionHelper?.clearCache()

        // ‚úÖ OTIMIZA√á√ÉO: Carregar modelo TensorFlow com tratamento de erro
        CoroutineScope(Dispatchers.IO).launch {
            try {
                loadTensorFlowModel()
                Log.d(TAG, "‚úÖ Modelo TensorFlow carregado com sucesso")
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao carregar modelo TensorFlow: ${e.message}")
                // Tentar carregar novamente ap√≥s um delay
                delay(3000)
                try {
                    loadTensorFlowModel()
                    Log.d(TAG, "‚úÖ Modelo TensorFlow carregado na segunda tentativa")
                } catch (e2: Exception) {
                    Log.e(TAG, "‚ùå Falha na segunda tentativa: ${e2.message}")
                }
            }
        }
        
        // Criar funcion√°rio de teste se n√£o existir
        createTestEmployeeIfNeeded()
        
        // Remover backgroundTint do bot√£o voltar
        binding.btnVoltar.backgroundTintList = null

        // Solicitar permiss√µes
        if (allPermissionsGranted()) {
            // ‚úÖ NOVA: Verificar permiss√µes de localiza√ß√£o tamb√©m
            if (!allLocationPermissionsGranted()) {
                ActivityCompat.requestPermissions(this, LOCATION_PERMISSIONS, REQUEST_CODE_LOCATION_PERMISSIONS)
            }
            startCamera()
        } else {
            ActivityCompat.requestPermissions(this, REQUIRED_PERMISSIONS, REQUEST_CODE_PERMISSIONS)
        }
        
        // Verificar integridade das faces e limpar duplicatas
        CoroutineScope(Dispatchers.IO).launch {
            try {
                verificarIntegridadeFaces()
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao verificar integridade: ${e.message}")
            }
        }
        
        // ‚úÖ NOVA FUN√á√ÉO: Verificar e corrigir problemas de reconhecimento
        CoroutineScope(Dispatchers.IO).launch {
            try {
                verificarECorrigirProblemasReconhecimento()
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao verificar problemas de reconhecimento: ${e.message}")
            }
        }
        
        // ‚úÖ NOVA: Testar rigorosidade dos crit√©rios de reconhecimento
        CoroutineScope(Dispatchers.IO).launch {
            try {
                val relatorio = faceRecognitionHelper?.testarRigorosidadeCriterios()
                Log.d(TAG, "üìã Relat√≥rio de crit√©rios: $relatorio")
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao testar crit√©rios: ${e.message}")
            }
        }
        
        // ‚úÖ NOVA FUN√á√ÉO: Monitor de estado para evitar travamento
        startStateMonitor()
    }
    
    /**
     * ‚úÖ MONITOR DE ESTADO OTIMIZADO: Menos agressivo e mais est√°vel
     */
    private fun startStateMonitor() {
        try {
            // ‚úÖ CORRE√á√ÉO: Parar monitor anterior se existir
            stopStateMonitor()
            
            // ‚úÖ CORRE√á√ÉO: Criar handler dedicado
            monitorHandler = Handler(Looper.getMainLooper())
            
            val monitorRunnable = object : Runnable {
                override fun run() {
                    try {
                        // ‚úÖ CORRE√á√ÉO: Verificar se activity ainda √© v√°lida
                        if (isFinishing || isDestroyed) {
                            Log.d(TAG, "üîÑ Activity finalizada - parando monitor")
                            return
                        }
                        
                        val currentTime = System.currentTimeMillis()
                        
                        // ‚úÖ OTIMIZA√á√ÉO: Verifica√ß√µes menos frequentes e mais suaves
                        val timeSinceLastFace = currentTime - lastFaceDetectionTime
                        val totalActivityTime = currentTime - activityStartTime
                        
                        // ‚úÖ OTIMIZA√á√ÉO: Timeout mais longo e menos agressivo
                        if (!timeoutPausado && !processandoFace) {
                            if (totalActivityTime > maxActivityTime) {
                                Log.w(TAG, "‚è±Ô∏è Tempo m√°ximo da activity atingido (${totalActivityTime/1000}s) - mantendo na tela de ponto")
                                // Apenas informar e manter na tela
                                statusText.text = "‚è±Ô∏è Sess√£o longa. Continue posicionando o rosto."
                            }
                            // Verificar timeout de face e apenas resetar dicas, sem navegar
                            if (timeSinceLastFace > noFaceTimeout) {
                                Log.w(TAG, "‚è±Ô∏è Timeout sem detectar face (${timeSinceLastFace/1000}s) - permanecendo na tela")
                                statusText.text = "üì∑ N√£o detectei rosto h√° um tempo. Posicione seu rosto na c√¢mera."
                            }
                        }
                        
                        // ‚úÖ OTIMIZA√á√ÉO: Verificar travamento com timeout maior e menos agressivo
                        if (processandoFace) {
                            val timeSinceStart = currentTime - lastProcessingTime
                            if (timeSinceStart > processingTimeout * 3) { // Triplicar o timeout para ser menos agressivo
                                Log.w(TAG, "‚ö†Ô∏è Processamento travado h√° ${timeSinceStart}ms - resetando suavemente")
                                runOnUiThread {
                                    try {
                                        forcarResetEstado()
                                    } catch (e: Exception) {
                                        Log.e(TAG, "‚ùå Erro ao resetar estado: ${e.message}")
                                    }
                                }
                            }
                        }
                        
                        // ‚úÖ OTIMIZA√á√ÉO: Verificar modelo com menos frequ√™ncia
                        if (!modelLoaded && (currentTime % 60000 < 10000)) { // A cada 60s por 10s
                            CoroutineScope(Dispatchers.IO).launch {
                                try {
                                    loadTensorFlowModel()
                                } catch (e: Exception) {
                                    Log.e(TAG, "‚ùå Erro ao recarregar modelo: ${e.message}")
                                }
                            }
                        }
                        
                        // ‚úÖ NOVA: Verificar uso de mem√≥ria periodicamente
                        if (currentTime % 30000 < 5000) { // A cada 30s
                            logMemoryUsage("Monitor")
                        }
                        
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Erro no monitor (ignorando): ${e.message}")
                    }
                    
                    // ‚úÖ OTIMIZA√á√ÉO: Reagendar apenas se activity ainda for v√°lida
                    try {
                        if (!isFinishing && !isDestroyed && monitorHandler != null) {
                            monitorHandler?.postDelayed(this, 10000) // ‚úÖ OTIMIZA√á√ÉO: 10 segundos (menos frequente)
                        }
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Erro ao reagendar monitor: ${e.message}")
                    }
                }
            }
            
            // ‚úÖ OTIMIZA√á√ÉO: Iniciar monitor com delay inicial
            monitorHandler?.postDelayed(monitorRunnable, 10000)
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao iniciar monitor: ${e.message}")
        }
    }
    
    /**
     * ‚úÖ NOVA: Parar monitor de estado para evitar memory leaks
     */
    private fun stopStateMonitor() {
        try {
            monitorHandler?.removeCallbacksAndMessages(null)
            monitorHandler = null
            Log.d(TAG, "‚úÖ Monitor de estado parado")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao parar monitor: ${e.message}")
        }
    }

    private fun setupUI() {
        try {
            Log.d(TAG, "üîß Configurando UI...")
            
            // Configurar padding para status bar
            binding.mainLayout.setPadding(0, getStatusBarHeight(), 0, 0)
            
            // Referenciar views usando binding
            statusText = binding.statusText
            previewView = binding.previewView
            overlay = binding.overlay
            funcionarioInfo = binding.funcionarioInfo
            funcionarioNome = binding.funcionarioNome
            ultimoPonto = binding.ultimoPonto
            tipoPontoRadioGroup = binding.tipoPontoRadioGroup
            
            // Configurar bot√£o voltar
            binding.btnVoltar.setOnClickListener { 
                Log.d(TAG, "üîÑ Usu√°rio clicou em voltar")
                voltarParaTelaInicial("Bot√£o voltar pressionado")
            }
            
            // Removido: long press que abria AlertDialogs de an√°lise para manter a tela limpa
            binding.btnVoltar.setOnLongClickListener {
                Log.d(TAG, "üîï Long press desativado nesta tela")
                true
            }
            
            Log.d(TAG, "‚úÖ UI configurada com sucesso")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao configurar UI", e)
            // Fallback simples
            val errorLayout = LinearLayout(this).apply {
                orientation = LinearLayout.VERTICAL
                gravity = android.view.Gravity.CENTER
                setBackgroundColor(Color.WHITE)
            }
            
            val errorText = TextView(this).apply {
                text = "‚ùå Erro ao carregar interface\nTente novamente"
                textSize = 18f
                gravity = android.view.Gravity.CENTER
                setTextColor(Color.RED)
                setPadding(32, 32, 32, 32)
            }
            
            errorLayout.addView(errorText)
            setContentView(errorLayout)
        }
    }

    private fun loadTensorFlowModel() {
        try {
            Log.d(TAG, "üîÑ Carregando modelo TensorFlow...")
            
            // ‚úÖ CORRE√á√ÉO: Verificar se o contexto ainda √© v√°lido
            if (isFinishing || isDestroyed) {
                Log.w(TAG, "‚ö†Ô∏è Activity finalizada, cancelando carregamento do modelo")
                return
            }
            
            // Tentar carregar primeiro dos assets
            val modelFile = try {
                assets.open("facenet_model.tflite")
            } catch (e: Exception) {
                Log.w(TAG, "facenet_model.tflite n√£o encontrado em assets, tentando mobilefacenet...")
                // Fallback para o modelo raw
                try {
                    resources.openRawResource(R.raw.mobilefacenet)
                } catch (e2: Exception) {
                    Log.e(TAG, "‚ùå Nenhum modelo encontrado: ${e2.message}")
                    throw e2
                }
            }
            
            val modelBuffer = modelFile.use { input ->
                val bytes = ByteArray(input.available())
                input.read(bytes)
                ByteBuffer.allocateDirect(bytes.size).apply {
                    order(ByteOrder.nativeOrder())
                    put(bytes)
                    rewind()
                }
            }
            
            // ‚úÖ CORRE√á√ÉO: Verificar se o buffer √© v√°lido
            if (modelBuffer.capacity() <= 0) {
                throw IllegalStateException("Modelo vazio ou inv√°lido")
            }
            
            val options = Interpreter.Options().apply {
                setNumThreads(1) // ‚úÖ CORRE√á√ÉO: Usar apenas 1 thread para evitar conflitos
                setUseNNAPI(false)
                setAllowFp16PrecisionForFp32(false) // ‚úÖ CORRE√á√ÉO: For√ßar precis√£o FP32
            }
            
            // ‚úÖ CORRE√á√ÉO: Criar interpreter com prote√ß√£o
            interpreter = try {
                Interpreter(modelBuffer, options)
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao criar interpreter: ${e.message}")
                null
            }
            
            // ‚úÖ CORRE√á√ÉO: Verificar se o interpreter foi criado corretamente
            interpreter?.let { interp ->
                try {
                    interp.allocateTensors()
                    modelLoaded = true
                    Log.d(TAG, "‚úÖ Modelo TensorFlow carregado com sucesso")
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå Erro ao alocar tensores: ${e.message}")
                    interpreter = null
                    modelLoaded = false
                    throw e
                }
            } ?: run {
                Log.e(TAG, "‚ùå Falha ao criar interpreter")
                modelLoaded = false
                throw IllegalStateException("Interpreter n√£o foi criado")
            }
            
            // Verificar dimens√µes do modelo
            val inputTensor = interpreter?.getInputTensor(0)
            val outputTensor = interpreter?.getOutputTensor(0)
            
            if (inputTensor != null && outputTensor != null) {
                val inputShape = inputTensor.shape()
                val outputShape = outputTensor.shape()
                
                Log.d(TAG, "üìä Dimens√µes do modelo:")
                Log.d(TAG, "   Input: ${inputShape.contentToString()}")
                Log.d(TAG, "   Output: ${outputShape.contentToString()}")
                
                // Atualizar dimens√µes baseado no modelo real
                if (inputShape.size >= 4) {
                    modelInputHeight = inputShape[1]
                    modelInputWidth = inputShape[2]
                    Log.d(TAG, "‚úÖ Dimens√µes atualizadas: ${modelInputWidth}x${modelInputHeight}")
                }
                
                if (outputShape.size >= 2) {
                    modelOutputSize = outputShape[1]
                    Log.d(TAG, "‚úÖ Tamanho de sa√≠da atualizado: $modelOutputSize")
                }
            }
            
            modelLoaded = true
            Log.d(TAG, "‚úÖ Modelo TensorFlow carregado com sucesso")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao carregar modelo: ${e.message}", e)
            modelLoaded = false
        }
    }

    private fun startCamera() {
        Log.d(TAG, "üì∑ === INICIANDO C√ÇMERA ===")
        
        // ‚úÖ CORRE√á√ÉO: Limpar camera anterior se existir
        stopCamera()
        
        val cameraProviderFuture = ProcessCameraProvider.getInstance(this)

        cameraProviderFuture.addListener({
            try {
                // ‚úÖ CORRE√á√ÉO: Verificar se activity ainda √© v√°lida
                if (isFinishing || isDestroyed) {
                    Log.w(TAG, "‚ö†Ô∏è Activity finalizada, cancelando inicializa√ß√£o da c√¢mera")
                    return@addListener
                }
                
                cameraProvider = cameraProviderFuture.get()

                val preview = Preview.Builder()
                    .setTargetResolution(android.util.Size(800, 600)) // ‚úÖ CORRE√á√ÉO: Resolu√ß√£o menor para economizar mem√≥ria
                    .build().also {
                        it.setSurfaceProvider(previewView.surfaceProvider)
                    }

                imageAnalyzer = ImageAnalysis.Builder()
                    .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
                    .setTargetResolution(android.util.Size(640, 480)) // ‚úÖ CORRE√á√ÉO: Resolu√ß√£o menor para an√°lise
                    .build()
                    .also {
                        it.setAnalyzer(ContextCompat.getMainExecutor(this)) { imageProxy ->
                            // ‚úÖ CORRE√á√ÉO: Verificar se activity ainda √© v√°lida antes de processar
                            if (!isFinishing && !isDestroyed) {
                                processImage(imageProxy)
                            } else {
                                imageProxy.close()
                            }
                        }
                    }

                val cameraSelector = CameraSelector.DEFAULT_FRONT_CAMERA

                try {
                    cameraProvider?.unbindAll()
                    cameraProvider?.bindToLifecycle(this, cameraSelector, preview, imageAnalyzer)
                    Log.d(TAG, "‚úÖ C√¢mera iniciada com sucesso")
                } catch (exc: Exception) {
                    Log.e(TAG, "‚ùå Falha ao iniciar c√¢mera", exc)
                }
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro cr√≠tico ao iniciar c√¢mera: ${e.message}")
                e.printStackTrace()
            }

        }, ContextCompat.getMainExecutor(this))
    }
    
    // ‚úÖ NOVA FUN√á√ÉO: Parar c√¢mera de forma segura
    private fun stopCamera() {
        try {
            cameraProvider?.unbindAll()
            cameraProvider = null
            Log.d(TAG, "üì∑ C√¢mera parada com sucesso")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao parar c√¢mera: ${e.message}")
        }
    }

    private fun processImage(imageProxy: ImageProxy) {
        try {
            val mediaImage = imageProxy.image
            if (mediaImage != null) {
                // ‚úÖ CORRE√á√ÉO: Verificar se a imagem √© v√°lida
                if (mediaImage.width <= 0 || mediaImage.height <= 0) {
                    Log.w(TAG, "‚ö†Ô∏è Imagem inv√°lida: ${mediaImage.width}x${mediaImage.height}")
                    imageProxy.close()
                    return
                }
                
                val image = InputImage.fromMediaImage(mediaImage, imageProxy.imageInfo.rotationDegrees)

                faceDetector.process(image)
                    .addOnSuccessListener { faces ->
                        try {
                            if (faces.isNotEmpty()) {
                                val face = faces[0]
                                
                                // ‚úÖ NOVO: Atualizar timestamp da √∫ltima detec√ß√£o de face
                                lastFaceDetectionTime = System.currentTimeMillis()
                                
                                // ‚úÖ CORRE√á√ÉO: Verificar se o boundingBox √© v√°lido
                                if (face.boundingBox.width() <= 0 || face.boundingBox.height() <= 0) {
                                    Log.w(TAG, "‚ö†Ô∏è BoundingBox inv√°lido: ${face.boundingBox}")
                                    overlay.clear()
                                    imageProxy.close()
                                    return@addOnSuccessListener
                                }
                                
                                overlay.setBoundingBox(face.boundingBox, mediaImage.width, mediaImage.height)

                                // Verificar dist√¢ncia da face
                                val faceArea = face.boundingBox.width() * face.boundingBox.height()
                                val screenArea = mediaImage.width * mediaImage.height
                                val faceRatio = faceArea.toFloat() / screenArea.toFloat()
                                
                                Log.d(TAG, "üìè Face ratio: $faceRatio (√°rea face: $faceArea, √°rea tela: $screenArea)")
                                
                                // ‚úÖ CORRE√á√ÉO: Verificar se h√° timeout apenas se estiver processando
                                if (processandoFace) {
                                    val currentTime = System.currentTimeMillis()
                                    if (currentTime - lastProcessingTime > processingTimeout) {
                                        Log.w(TAG, "‚ö†Ô∏è Timeout detectado, resetando processandoFace")
                                        processandoFace = false
                                        lastProcessingTime = 0L
                                        try {
                                            if (::statusText.isInitialized && !isFinishing && !isDestroyed) {
                                                statusText.text = "üì∑ Posicione seu rosto na c√¢mera"
                                            }
                                        } catch (e: Exception) {
                                            Log.e(TAG, "‚ùå Erro ao resetar status: ${e.message}")
                                        }
                                    }
                                }
                                
                                // ‚úÖ OTIMIZA√á√ÉO: Atualizar status baseado na posi√ß√£o da face
                                if (!processandoFace) {
                                    if (faceRatio < 0.08f) {
                                        statusText.text = "üì∑ Aproxime seu rosto"
                                    } else if (!overlay.isFaceInOval(face.boundingBox)) {
                                        statusText.text = "üì∑ Centre seu rosto no oval"
                                    } else {
                                        statusText.text = "üîç Pronto..."
                                    }
                                }
                                
                                // ‚úÖ CORRE√á√ÉO: Iniciar reconhecimento apenas quando face estiver bem posicionada
                                if (overlay.isFaceInOval(face.boundingBox) && faceRatio >= 0.08f && !processandoFace) {
                                    // ‚úÖ CORRE√á√ÉO: Verificar se o modelo est√° carregado antes de processar
                                    if (!modelLoaded || interpreter == null) {
                                        Log.w(TAG, "‚ö†Ô∏è Modelo n√£o carregado, aguardando...")
                                        statusText.text = "‚è≥ Carregando modelo..."
                                        imageProxy.close()
                                        return@addOnSuccessListener
                                    }
                                    
                                                        processandoFace = true
                    lastProcessingTime = System.currentTimeMillis()
                    Log.d(TAG, "üë§ === INICIANDO RECONHECIMENTO FACIAL ===")
                    
                    // ‚úÖ NOVA: Monitorar mem√≥ria antes do processamento
                    logMemoryUsage("Antes reconhecimento")
                    
                    statusText.text = "üîç Reconhecendo..."
                                    
                                    try {
                                        // Converter para bitmap antes de fechar o proxy
                                        val bitmap = toBitmap(mediaImage)
                                        
                                        // ‚úÖ CORRE√á√ÉO: Verificar se o bitmap foi criado corretamente
                                        if (bitmap.isRecycled || bitmap.width <= 0 || bitmap.height <= 0) {
                                            Log.e(TAG, "‚ùå Bitmap inv√°lido criado: ${bitmap.width}x${bitmap.height}")
                                            processandoFace = false
                                            lastProcessingTime = 0L
                                            imageProxy.close()
                                            return@addOnSuccessListener
                                        }
                                        
                                        imageProxy.close()
                                        
                                        // Processar o bitmap diretamente
                                        processDetectedFace(bitmap, face.boundingBox)
                                    } catch (e: Exception) {
                                        Log.e(TAG, "‚ùå Erro ao converter bitmap", e)
                                        processandoFace = false
                                        lastProcessingTime = 0L
                                        imageProxy.close()
                                    }
                                } else {
                                    // ‚úÖ CORRE√á√ÉO: Fechar proxy se n√£o iniciou processamento
                                    imageProxy.close()
                                }
                            } else {
                                overlay.clear()
                                // ‚úÖ NOVA: Resetar estado se n√£o h√° faces detectadas
                                if (processandoFace) {
                                    Log.w(TAG, "‚ö†Ô∏è Nenhuma face detectada, resetando estado de processamento")
                                    processandoFace = false
                                    lastProcessingTime = 0L
                                    try {
                                        if (::statusText.isInitialized && !isFinishing && !isDestroyed) {
                                            statusText.text = "üì∑ Posicione seu rosto na c√¢mera"
                                        }
                                    } catch (e: Exception) {
                                        Log.e(TAG, "‚ùå Erro ao resetar status: ${e.message}")
                                    }
                                }
                                imageProxy.close()
                            }
                        } catch (e: Exception) {
                            Log.e(TAG, "‚ùå Erro no processamento de faces", e)
                            processandoFace = false
                            imageProxy.close()
                        }
                    }
                    .addOnFailureListener { e ->
                        Log.e(TAG, "‚ùå Erro na detec√ß√£o", e)
                        processandoFace = false
                        imageProxy.close()
                    }
            } else {
                Log.w(TAG, "‚ö†Ô∏è MediaImage √© nulo")
                imageProxy.close()
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro cr√≠tico no processImage", e)
            processandoFace = false
            try {
                imageProxy.close()
            } catch (closeException: Exception) {
                Log.e(TAG, "‚ùå Erro ao fechar imageProxy", closeException)
            }
        }
    }

    private fun processDetectedFace(bitmap: Bitmap, boundingBox: Rect) {
        // ‚úÖ CORRE√á√ÉO: Resetar estado a cada nova detec√ß√£o
        Log.d(TAG, "üîÑ === PROCESSANDO FACE DETECTADA ===")
        funcionarioReconhecido = null
        
        // ‚úÖ OTIMIZA√á√ÉO: Pausar timeout apenas durante processamento cr√≠tico
        pausarTimeout("Processando face detectada")
        
        // ‚úÖ OTIMIZA√á√ÉO: Auto-reset reduzido para 8 segundos
        Handler(Looper.getMainLooper()).postDelayed({
            if (processandoFace) {
                Log.w(TAG, "‚ö†Ô∏è Auto-reset do processandoFace ap√≥s 8 segundos")
                processandoFace = false
                lastProcessingTime = 0L
                pontoJaRegistrado = false
                // ‚úÖ CORRE√á√ÉO: N√ÉO limpar ultimoFuncionarioReconhecido no auto-reset
                // S√≥ limpar no reset manual ou nova pessoa
                try {
                    if (::statusText.isInitialized && !isFinishing && !isDestroyed) {
                        statusText.text = "üì∑ Posicione seu rosto na c√¢mera"
                    }
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå Erro ao resetar status: ${e.message}")
                }
                retomarTimeout("Auto-reset timeout")
            }
        }, 8000)
        
        // ‚úÖ OTIMIZA√á√ÉO: Verifica√ß√µes b√°sicas apenas
        if (bitmap.isRecycled || bitmap.width <= 0 || bitmap.height <= 0) {
            Log.e(TAG, "‚ùå Bitmap inv√°lido")
            processandoFace = false
            lastProcessingTime = 0L
            retomarTimeout("Bitmap inv√°lido")
            return
        }
        
        if (boundingBox.width() <= 0 || boundingBox.height() <= 0) {
            Log.e(TAG, "‚ùå BoundingBox inv√°lido")
            processandoFace = false
            lastProcessingTime = 0L
            retomarTimeout("BoundingBox inv√°lido")
            return
        }
        
        CoroutineScope(Dispatchers.IO).launch {
            try {
                // ‚úÖ OTIMIZA√á√ÉO: Verifica√ß√£o simples de activity
                if (isFinishing || isDestroyed) {
                    Log.w(TAG, "‚ö†Ô∏è Activity finalizada, cancelando")
                    return@launch
                }
                
                // ‚úÖ OTIMIZA√á√ÉO: Verifica√ß√£o r√°pida do modelo
                if (!modelLoaded || interpreter == null) {
                    Log.w(TAG, "‚ö†Ô∏è Modelo n√£o carregado")
                                            withContext(Dispatchers.Main) {
                            try {
                                if (::statusText.isInitialized && !isFinishing && !isDestroyed) {
                                    statusText.text = "‚ùå Carregando modelo..."
                                } else {
                                    // Activity finalizada, n√£o fazer nada
                                }
                            } catch (e: Exception) {
                            Log.e(TAG, "‚ùå Erro ao atualizar status: ${e.message}")
                        }
                    }
                    processandoFace = false
                    lastProcessingTime = 0L
                    retomarTimeout("Modelo n√£o carregado")
                    return@launch
                }
                
                // ‚úÖ OTIMIZA√á√ÉO: Verifica√ß√£o r√°pida do helper
                if (faceRecognitionHelper == null) {
                    Log.w(TAG, "‚ö†Ô∏è Helper n√£o dispon√≠vel")
                    processandoFace = false
                    lastProcessingTime = 0L
                    retomarTimeout("Helper n√£o dispon√≠vel")
                    return@launch
                }
                
                try {
                    withContext(Dispatchers.Main) {
                        if (::statusText.isInitialized && !isFinishing) {
                            statusText.text = "üîç Reconhecendo..."
                        }
                    }
                } catch (e: Exception) {
                    Log.w(TAG, "‚ö†Ô∏è Erro ao atualizar status: ${e.message}")
                }

                Log.d(TAG, "üîÑ Iniciando processamento de face...")

                // ‚úÖ OTIMIZA√á√ÉO: Verifica√ß√£o simplificada de bitmap
                if (bitmap.isRecycled) {
                    throw IllegalStateException("Bitmap reciclado")
                }

                // Recortar face
                val faceBmp = cropFace(bitmap, boundingBox)
                if (faceBmp.isRecycled || faceBmp.width <= 0 || faceBmp.height <= 0) {
                    throw IllegalStateException("Face recortada inv√°lida")
                }
                
                // ‚úÖ CORRE√á√ÉO: Limpar bitmap anterior para evitar memory leak
                currentFaceBitmap?.let { oldBitmap ->
                    if (!oldBitmap.isRecycled) {
                        oldBitmap.recycle()
                    }
                }
                
                // Salvar foto da face para registro do ponto
                val faceForPoint = try {
                    Bitmap.createScaledBitmap(faceBmp, 300, 300, true)
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå Erro ao criar faceForPoint: ${e.message}")
                    null
                }
                
                currentFaceBitmap = faceForPoint?.let { bitmap ->
                    try {
                        val fixedBitmap = fixImageOrientationDefinitive(bitmap)
                        // ‚úÖ CORRE√á√ÉO: Reciclar bitmap original se diferente do corrigido
                        if (fixedBitmap != bitmap && !bitmap.isRecycled) {
                            bitmap.recycle()
                        }
                        fixedBitmap
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Erro ao corrigir orienta√ß√£o: ${e.message}")
                        bitmap
                    }
                }
                
                if (currentFaceBitmap != null) {
                    Log.d(TAG, "üì∏ Foto da face capturada com sucesso: ${currentFaceBitmap!!.width}x${currentFaceBitmap!!.height}")
                } else {
                    Log.w(TAG, "‚ö†Ô∏è Falha ao capturar foto da face")
                }

                // Redimensionar para o modelo
                val resized = try {
                    Bitmap.createScaledBitmap(faceBmp, modelInputWidth, modelInputHeight, true)
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå Erro ao redimensionar: ${e.message}")
                    // ‚úÖ CORRE√á√ÉO: Limpar bitmap de face antes de lan√ßar exce√ß√£o
                    if (!faceBmp.isRecycled) {
                        faceBmp.recycle()
                    }
                    throw e
                }
                
                if (resized.isRecycled || resized.width != modelInputWidth || resized.height != modelInputHeight) {
                    // ‚úÖ CORRE√á√ÉO: Limpar bitmaps antes de lan√ßar exce√ß√£o
                    if (!faceBmp.isRecycled) {
                        faceBmp.recycle()
                    }
                    if (!resized.isRecycled) {
                        resized.recycle()
                    }
                    throw IllegalStateException("Redimensionamento falhou")
                }

                if (modelLoaded && interpreter != null) {
                    // ‚úÖ OTIMIZA√á√ÉO: Processamento direto sem logs excessivos
                    val inputTensor = convertBitmapToTensorInput(resized)
                    // Rebobinar buffer para garantir posi√ß√£o no in√≠cio
                    inputTensor.rewind()
                    val expectedSize = 4 * modelInputWidth * modelInputHeight * 3
                    if (inputTensor.capacity() != expectedSize) {
                        throw IllegalStateException("Tensor tem tamanho incorreto")
                    }
                    
                    // ‚úÖ PROTE√á√ÉO CR√çTICA: Validar input antes da infer√™ncia
                    if (inputTensor.capacity() <= 0) {
                        throw IllegalStateException("Tensor vazio")
                    }
                    
                    // ‚úÖ PROTE√á√ÉO: Verificar se todos os valores s√£o zero (indica problema)
                    val position = inputTensor.position()
                    inputTensor.rewind()
                    var allZeros = true
                    for (i in 0 until minOf(100, inputTensor.capacity() / 4)) { // Verificar primeiros 100 floats
                        if (inputTensor.getFloat() != 0.0f) {
                            allZeros = false
                            break
                        }
                    }
                    inputTensor.position(position) // Restaurar posi√ß√£o
                    
                    if (allZeros) {
                        throw IllegalStateException("Tensor cont√©m apenas zeros - problema na normaliza√ß√£o")
                    }
                    
                    					// ‚úÖ PROTE√á√ÉO CR√çTICA: Verificar alinhamento de mem√≥ria
					if (inputTensor.capacity() % 4 != 0) {
						throw IllegalStateException("Tensor n√£o est√° alinhado corretamente")
					}
					
					// ‚úÖ PROTE√á√ÉO: Verificar se h√° valores NaN/Infinitos no input
					inputTensor.rewind()
					var hasInvalidValues = false
					for (i in 0 until minOf(50, inputTensor.capacity() / 4)) {
						val value = inputTensor.getFloat()
						if (value.isNaN() || value.isInfinite()) {
							hasInvalidValues = true
							break
						}
					}
					inputTensor.position(position)
					
					if (hasInvalidValues) {
						throw IllegalStateException("Tensor cont√©m valores inv√°lidos (NaN/Infinito)")
					}
					
					// ‚úÖ PROTE√á√ÉO CR√çTICA: Verificar se o buffer est√° acess√≠vel
					if (!inputTensor.hasRemaining()) {
						throw IllegalStateException("Tensor n√£o tem dados restantes")
					}
					
					// ‚úÖ PROTE√á√ÉO: Verificar se o tamanho est√° correto (usando vari√°vel j√° declarada)
					if (inputTensor.capacity() != expectedSize) {
						throw IllegalStateException("Tensor com tamanho incorreto: ${inputTensor.capacity()} vs $expectedSize")
					}
                    
                    val output = Array(1) { FloatArray(modelOutputSize) }
                    
                    // ‚úÖ OTIMIZA√á√ÉO: Infer√™ncia com timeout reduzido
                    val vetorFacial = try {
                        interpreter?.let { interp ->
                            if (inputTensor.capacity() <= 0) {
                                throw IllegalStateException("Tensor vazio")
                            }
                            
                            if (isFinishing || isDestroyed) {
                                throw IllegalStateException("Activity finalizada durante infer√™ncia")
                            }
                            
                            // ‚úÖ OTIMIZA√á√ÉO: Timeout reduzido para 5 segundos
                            try {
                                withTimeout(5000L) { // Reduzido de 10 para 5 segundos
                                    // ‚úÖ PROTE√á√ÉO CR√çTICA: Capturar crashes nativos do TFLite
                                    try {
                                        // Verificar se o interpreter ainda √© v√°lido
                                        if (interp == null) {
                                            throw IllegalStateException("Interpreter √© null")
                                        }
                                        
                                        // ‚úÖ PROTE√á√ÉO: Verificar se o modelo est√° carregado corretamente
                                        try {
                                            interp.allocateTensors()
                                        } catch (e: Exception) {
                                            throw IllegalStateException("Falha ao alocar tensores: ${e.message}")
                                        }
                                        
                                        // Executar infer√™ncia com prote√ß√£o nativa
                                        interp.run(inputTensor, output)
                                        
                                        // ‚úÖ VALIDA√á√ÉO: Verificar se o output √© v√°lido
                                        if (output[0].all { it == 0.0f || it.isNaN() || it.isInfinite() }) {
                                            throw IllegalStateException("Output inv√°lido - todos zeros ou valores inv√°lidos")
                                        }
                                        
                                        // ‚úÖ VALIDA√á√ÉO ADICIONAL: Verificar se h√° pelo menos alguns valores n√£o-zero
                                        val nonZeroCount = output[0].count { it != 0.0f && !it.isNaN() && !it.isInfinite() }
                                        if (nonZeroCount < 10) {
                                            throw IllegalStateException("Output insuficiente - apenas $nonZeroCount valores v√°lidos")
                                        }
                                        
                                    } catch (e: UnsatisfiedLinkError) {
                                        Log.e(TAG, "‚ùå Erro nativo do TFLite: ${e.message}")
                                        throw IllegalStateException("Erro nativo do TensorFlow Lite")
                                    } catch (e: UnsatisfiedLinkError) {
                                        Log.e(TAG, "‚ùå Erro de link nativo: ${e.message}")
                                        throw IllegalStateException("Erro de biblioteca nativa")
                                    } catch (e: Exception) {
                                        Log.e(TAG, "‚ùå Erro durante infer√™ncia: ${e.message}")
                                        throw e
                                    }
                                    
                                    output[0]
                                }
							} catch (e: TimeoutCancellationException) {
                                Log.e(TAG, "‚ùå Erro na infer√™ncia: ${e.message}")
                                throw IllegalStateException("Falha na execu√ß√£o do modelo")
                            }
                            
                            if (output[0].isEmpty()) {
                                throw IllegalStateException("Sa√≠da vazia do modelo")
                            }
                            
                            output[0]
                        } ?: throw IllegalStateException("Interpreter n√£o dispon√≠vel")
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Erro na infer√™ncia: ${e.message}")
                        throw e
                    }

                    // ‚úÖ OTIMIZA√á√ÉO: Corre√ß√£o r√°pida de NaN
                    var vetorFacialFinal = vetorFacial
                    if (vetorFacial.any { it.isNaN() || it.isInfinite() }) {
                        Log.w(TAG, "‚ö†Ô∏è Corrigindo valores inv√°lidos...")
                        vetorFacialFinal = FloatArray(vetorFacial.size) { index ->
                            val valor = vetorFacial[index]
                            if (valor.isNaN() || valor.isInfinite()) 0.0f else valor
                        }
                    }

                    // ‚úÖ CORRE√á√ÉO: Limpar bitmap redimensionado ap√≥s uso do modelo
                    try {
                        if (!resized.isRecycled) {
                            resized.recycle()
                        }
                        if (!faceBmp.isRecycled) {
                            faceBmp.recycle()
                        }
                    } catch (e: Exception) {
                        Log.w(TAG, "‚ö†Ô∏è Erro ao limpar bitmaps tempor√°rios: ${e.message}")
                    }

                    // ‚úÖ OTIMIZA√á√ÉO: Reconhecimento facial otimizado
                    val funcionario = try {
                        faceRecognitionHelper?.recognizeFace(vetorFacialFinal)
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Erro no reconhecimento: ${e.message}")
                        // ‚úÖ CORRE√á√ÉO: N√£o deixar crashar, apenas retornar null
                        null
                    }

                    // ‚úÖ OTIMIZA√á√ÉO: Processamento de resultado com tratamento de erro
                    try {
                        withContext(Dispatchers.Main) {
                            if (isFinishing || isDestroyed) {
                                Log.w(TAG, "‚ö†Ô∏è Activity finalizada durante resultado")
                                return@withContext
                            }
                            
                            if (funcionario != null) {
                                Log.d(TAG, "‚úÖ Funcion√°rio reconhecido: ${funcionario.nome}")
                                
                                // ‚úÖ CORRE√á√ÉO CR√çTICA: Verifica√ß√£o de duplicatas APENAS para a MESMA pessoa em pouco tempo
                                val agora = System.currentTimeMillis()
                                val tempoLimiteParaDuplicata = 10000L // 10 segundos para considerar duplicata
                                val ehMesmaPessoa = ultimoFuncionarioReconhecido == funcionario.codigo
                                val dentrodoTempoLimite = (agora - lastProcessingTime) < tempoLimiteParaDuplicata
                                
                                if (pontoJaRegistrado && ehMesmaPessoa && dentrodoTempoLimite) {
                                    Log.w(TAG, "‚ö†Ô∏è Ponto duplicado para ${funcionario.nome} em ${agora - lastProcessingTime}ms")
                                    processandoFace = false
                                    lastProcessingTime = 0L
                                    retomarTimeout("Ponto duplicado")
                                    return@withContext
                                }
                                
                                // ‚úÖ CORRE√á√ÉO: Sempre permitir pessoa DIFERENTE
                                if (!ehMesmaPessoa) {
                                    Log.d(TAG, "üîÑ Nova pessoa detectada: ${funcionario.nome} (anterior: $ultimoFuncionarioReconhecido)")
                                    pontoJaRegistrado = false // Reset para nova pessoa
                                }
                                
                                // Marcar como processado
                                pontoJaRegistrado = true
                                ultimoFuncionarioReconhecido = funcionario.codigo
                                lastProcessingTime = agora
                                
                                // ‚úÖ OTIMIZA√á√ÉO: Registro de ponto direto e r√°pido
                                CoroutineScope(Dispatchers.IO).launch {
                                    try {
                                        if (isFinishing || isDestroyed) {
                                            Log.w(TAG, "‚ö†Ô∏è Activity finalizada antes do registro")
                                            return@launch
                                        }
                                        
                                        // ‚úÖ CORRE√á√ÉO: Capturar exce√ß√µes no registro de ponto
                                        try {
                                            registrarPonto(funcionario)
                                        } catch (e: Exception) {
                                            Log.e(TAG, "‚ùå Erro ao registrar ponto: ${e.message}")
                                            // ‚úÖ CORRE√á√ÉO: N√£o deixar crashar, apenas logar o erro
                                            withContext(Dispatchers.Main) {
                                                if (!isFinishing && !isDestroyed) {
                                                    Toast.makeText(this@PontoActivity, "Erro ao registrar ponto. Tente novamente.", Toast.LENGTH_SHORT).show()
                                                }
                                            }
                                        }
                                    } catch (e: Exception) {
                                        Log.e(TAG, "‚ùå Erro cr√≠tico no registro: ${e.message}")
                                        // ‚úÖ CORRE√á√ÉO: N√£o deixar crashar
                                    }
                                }
                                
                            } else {
                                // ‚úÖ CORRE√á√ÉO: Quando n√£o reconhece, apenas continuar sem crashar
                                Log.w(TAG, "‚ùå Nenhum funcion√°rio reconhecido")
                                processandoFace = false
                                retomarTimeout("Nenhum funcion√°rio reconhecido")
                            }
                        }
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Erro no processamento do resultado: ${e.message}")
                        // ‚úÖ CORRE√á√ÉO: N√£o deixar crashar, apenas resetar estado
                        processandoFace = false
                        retomarTimeout("Erro no processamento")
                    }
                } else {
                    withContext(Dispatchers.Main) {
                        statusText.text = "‚ùå Modelo n√£o carregado"
                        processandoFace = false
                        lastProcessingTime = 0L
                        retomarTimeout("Modelo n√£o carregado")
                    }
                }

            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro no processamento: ${e.message}")
                
                // ‚úÖ OTIMIZA√á√ÉO: Tratamento de erro simplificado
                try {
                    withContext(Dispatchers.Main) {
                        if (!isFinishing && !isDestroyed && ::statusText.isInitialized) {
                            val errorMsg = when {
                                e.message?.contains("toBitmap") == true -> "‚ùå Erro na imagem"
                                e.message?.contains("cropFace") == true -> "‚ùå Erro no recorte"
                                e.message?.contains("model") == true -> "‚ùå Erro no modelo"
                                e.message?.contains("reciclado") == true -> "‚ùå Imagem inv√°lida"
                                else -> "‚ùå Erro no reconhecimento"
                            }
                            
                            try {
                                statusText.text = errorMsg
                                
                                // Reset ap√≥s 3 segundos
                                statusText.postDelayed({
                                    try {
                                        if (!isFinishing && !isDestroyed && ::statusText.isInitialized) {
                                            statusText.text = "üì∑ Posicione seu rosto na c√¢mera"
                                        }
                                    } catch (e2: Exception) {
                                        Log.e(TAG, "‚ùå Erro no reset UI: ${e2.message}")
                                    }
                                }, 3000)
                            } catch (e2: Exception) {
                                Log.e(TAG, "‚ùå Erro ao atualizar UI: ${e2.message}")
                            }
                        }
                    }
                } catch (e2: Exception) {
                    Log.e(TAG, "‚ùå Erro no tratamento de erro: ${e2.message}")
                }
            } finally {
                // ‚úÖ OTIMIZA√á√ÉO: Always reset processandoFace
                try {
                    processandoFace = false
                    lastProcessingTime = 0L
                    retomarTimeout("Finally block")
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå Erro ao resetar no finally: ${e.message}")
                }
            }
        }
    }

    private suspend fun mostrarFuncionarioReconhecido(funcionario: FuncionariosEntity) {
        try {
            Log.d(TAG, "‚úÖ Registrando ponto para: ${funcionario.nome}")
            
            // ‚úÖ CORRE√á√ÉO: Verificar se o funcion√°rio √© v√°lido
            if (funcionario.codigo.isBlank()) {
                throw IllegalArgumentException("C√≥digo do funcion√°rio est√° vazio")
            }
            
            funcionarioReconhecido = funcionario
            
            // Registrar ponto automaticamente
            val horarioAtual = System.currentTimeMillis()
            val formato = SimpleDateFormat("dd/MM/yyyy HH:mm:ss", Locale.getDefault())
            val dataFormatada = formato.format(Date(horarioAtual))
            
            // Registrar ponto simples sem classifica√ß√£o ENTRADA/SA√çDA
            val tipoPonto = "PONTO"
            
            // ‚úÖ CORRE√á√ÉO: N√ÉO salvar foto para evitar problemas
            val fotoBase64 = null // N√£o salvar foto por enquanto
            
            // ‚úÖ CORRE√á√ÉO: Criar ponto com prote√ß√£o
            val ponto = try {
                PontosGenericosEntity(
                    funcionarioId = funcionario.codigo,
                    funcionarioNome = funcionario.nome ?: "Funcion√°rio",
                    funcionarioMatricula = funcionario.matricula ?: "",
                    funcionarioCpf = funcionario.cpf ?: "",
                    funcionarioCargo = funcionario.cargo ?: "",
                    funcionarioSecretaria = funcionario.secretaria ?: "",
                    funcionarioLotacao = funcionario.lotacao ?: "",
                    tipoPonto = tipoPonto,
                    dataHora = horarioAtual,
                    fotoBase64 = fotoBase64
                )
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao criar entidade de ponto: ${e.message}")
                throw e
            }
            
            // ‚úÖ CORRE√á√ÉO: Inserir no banco com prote√ß√£o
            try {
                AppDatabase.getInstance(this)
                    .pontosGenericosDao()
                    .insert(ponto)
                Log.d(TAG, "üíæ Ponto registrado: ${funcionario.nome} - $dataFormatada")
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao inserir ponto no banco: ${e.message}")
                throw e
            }
            
            // ‚úÖ CORRE√á√ÉO: Salvar ponto para sincroniza√ß√£o com prote√ß√£o
            try {
                val pontoService = PontoSincronizacaoService()
                pontoService.salvarPontoParaSincronizacao(
                    this,
                    funcionario.codigo,
                    funcionario.nome ?: "Funcion√°rio",
                    tipoPonto.lowercase(),
                    fotoBase64,
                    null, // ‚úÖ NOVA: Sem latitude nesta fun√ß√£o (legacy)
                    null  // ‚úÖ NOVA: Sem longitude nesta fun√ß√£o (legacy)
                )
                Log.d(TAG, "‚úÖ Ponto salvo para sincroniza√ß√£o")
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao salvar ponto para sincroniza√ß√£o: ${e.message}")
                // N√£o rethrow - sincroniza√ß√£o n√£o √© cr√≠tica
            }
            
            // ‚úÖ CORRE√á√ÉO: Mostrar confirma√ß√£o simples e fechar IMEDIATAMENTE
            withContext(Dispatchers.Main) {
                try {
                    // ‚úÖ SOLU√á√ÉO DEFINITIVA: Toast simples + fechamento imediato
                    Log.d(TAG, "‚úÖ Ponto salvo com sucesso para ${funcionario.nome}")
                    Toast.makeText(this@PontoActivity, 
                        "‚úÖ Ponto registrado!\n${funcionario.nome}\n$dataFormatada", 
                        Toast.LENGTH_LONG).show()
                    
                    // ‚úÖ CORRE√á√ÉO: Fechar IMEDIATAMENTE ap√≥s 2 segundos
                    Handler(Looper.getMainLooper()).postDelayed({
                        try {
                            Log.d(TAG, "üîö Fechando activity ap√≥s ponto registrado")
                            if (!isFinishing && !isDestroyed) {
                                finish()
                            } else {
                                Log.w(TAG, "‚ö†Ô∏è Activity j√° finalizada, n√£o fechando")
                            }
                        } catch (e: Exception) {
                            Log.e(TAG, "‚ùå Erro ao fechar: ${e.message}")
                            // For√ßa sa√≠da do processo se necess√°rio
                            android.os.Process.killProcess(android.os.Process.myPid())
                        }
                    }, 2000)
                    
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå Erro ao mostrar toast: ${e.message}")
                    // Fechar imediatamente se der erro
                    try {
                        if (!isFinishing && !isDestroyed) {
                            finish()
                        } else {
                            Log.w(TAG, "‚ö†Ô∏è Activity j√° finalizada, n√£o fechando")
                        }
                    } catch (e2: Exception) {
                        Log.e(TAG, "‚ùå Erro cr√≠tico: ${e2.message}")
                        android.os.Process.killProcess(android.os.Process.myPid())
                    }
                }
            }
            
            // ‚úÖ CORRE√á√ÉO: N√ÉO chamar resetarAposPonto aqui - dialog vai gerenciar o fechamento
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro cr√≠tico ao registrar ponto: ${e.message}", e)
            
            // ‚úÖ CORRE√á√ÉO: Fallback para evitar crash
            withContext(Dispatchers.Main) {
                try {
                    Toast.makeText(this@PontoActivity, 
                        "‚ùå Erro ao registrar ponto\nTente novamente", 
                        Toast.LENGTH_LONG).show()
                    statusText.text = "üì∑ Posicione seu rosto na c√¢mera"
                } catch (e2: Exception) {
                    Log.e(TAG, "‚ùå Erro no fallback: ${e2.message}")
                }
            }
        } finally {
            processandoFace = false
        }
    }

    private fun mostrarFuncionarioNaoReconhecido() {
        CoroutineScope(Dispatchers.IO).launch {
            try {
                val db = AppDatabase.getInstance(this@PontoActivity)
                val funcionarios = db.usuariosDao().getUsuario()
                
                // Verificar se h√° pelo menos uma face cadastrada
                var temFacesCadastradas = false
                for (funcionario in funcionarios) {
                    val face = db.faceDao().getByFuncionarioId(funcionario.id.toString())
                    if (face != null) {
                        temFacesCadastradas = true
                        break
                    }
                }
                
                withContext(Dispatchers.Main) {
                    statusText.text = if (funcionarios.isEmpty()) {
                        "‚ùå Nenhum funcion√°rio cadastrado\nRegistre funcion√°rios primeiro"
                    } else if (!temFacesCadastradas) {
                        "‚ùå Nenhum rosto cadastrado\nRegistre rostos via menu principal"
                    } else {
                        "‚ùå Funcion√°rio n√£o reconhecido\nTente novamente ou cadastre novo rosto"
                    }
                    
                    funcionarioInfo.visibility = View.GONE
                    
                    // Resetar ap√≥s 5 segundos para dar tempo de ler
                    statusText.postDelayed({
                        statusText.text = "üì∑ Posicione seu rosto na c√¢mera"
                        processandoFace = false
                    }, 5000)
                }
                
            } catch (e: Exception) {
                withContext(Dispatchers.Main) {
                    statusText.text = "‚ùå Erro no sistema\nTente novamente"
                    funcionarioInfo.visibility = View.GONE
                    
                    statusText.postDelayed({
                        statusText.text = "üì∑ Posicione seu rosto na c√¢mera"
                        processandoFace = false
                    }, 3000)
                }
            }
        }
    }



    private fun mostrarConfirmacaoPonto(funcionario: FuncionariosEntity, tipoPonto: String, horario: String) {
        try {
            Log.d(TAG, "üéâ Mostrando confirma√ß√£o de ponto para ${funcionario.nome}")
            
            // ‚úÖ CORRE√á√ÉO: Verificar se a activity ainda √© v√°lida
            if (isFinishing || isDestroyed) {
                Log.w(TAG, "‚ö†Ô∏è Activity finalizada, cancelando confirma√ß√£o")
                return
            }
            
            // ‚úÖ NOVA ABORDAGEM: Toast e manter tela ativa
            Toast.makeText(this, "‚úÖ Ponto registrado!\n${funcionario.nome}\n$horario", Toast.LENGTH_LONG).show()
            
            // ‚úÖ RESETAR ESTADO E MANTER TELA ATIVA
            Handler(Looper.getMainLooper()).postDelayed({
                try {
                    Log.d(TAG, "üîÑ Resetando estado ap√≥s registro de ponto")
                    
                    // ‚úÖ CORRE√á√ÉO: Limpar estado sem fechar activity
                    forcarResetEstado()
                    
                    // ‚úÖ MANTER TELA ATIVA - N√ÉO FECHAR
                    Log.d(TAG, "‚úÖ Tela mantida ativa para novos registros")
                    
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå Erro ao resetar estado: ${e.message}")
                }
            }, 2000) // Aguardar 2 segundos
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao mostrar confirma√ß√£o", e)
            
            // ‚úÖ FALLBACK: Resetar estado mesmo com erro
            try {
                forcarResetEstado()
            } catch (e2: Exception) {
                Log.e(TAG, "‚ùå Erro cr√≠tico ao resetar: ${e2.message}")
            }
        }
    }
    
    private fun cancelarPonto() {
        funcionarioReconhecido = null
        funcionarioInfo.visibility = View.GONE
        statusText.text = "üì∑ Posicione seu rosto na c√¢mera"
        processandoFace = false
    }

    private fun dpToPx(dp: Int): Int {
        return (dp * resources.displayMetrics.density).toInt()
    }
    
    private fun getStatusBarHeight(): Int {
        var result = 0
        val resourceId = resources.getIdentifier("status_bar_height", "dimen", "android")
        if (resourceId > 0) {
            result = resources.getDimensionPixelSize(resourceId)
        }
        return result
    }
    
    private fun convertBitmapToTensorInput(bitmap: Bitmap): ByteBuffer {
        try {
            val inputSize = modelInputWidth // 112
            Log.d(TAG, "üîß Preparando tensor para entrada ${inputSize}x${inputSize}")
            
            if (bitmap.isRecycled) {
                throw IllegalStateException("Bitmap foi reciclado")
            }
            
            // Alocar buffer com tamanho correto para float32
            val byteBuffer = ByteBuffer.allocateDirect(4 * inputSize * inputSize * 3)
            byteBuffer.order(ByteOrder.nativeOrder())

            val resizedBitmap = if (bitmap.width != inputSize || bitmap.height != inputSize) {
                Log.d(TAG, "üîß Redimensionando bitmap de ${bitmap.width}x${bitmap.height} para ${inputSize}x${inputSize}")
                Bitmap.createScaledBitmap(bitmap, inputSize, inputSize, true)
            } else {
                bitmap
            }
            
            val intValues = IntArray(inputSize * inputSize)
            resizedBitmap.getPixels(intValues, 0, inputSize, 0, 0, inputSize, inputSize)
            Log.d(TAG, "‚úÖ Pixels extra√≠dos: ${intValues.size} pixels")

            var pixelCount = 0
            for (pixel in intValues) {
                // ‚úÖ CORRE√á√ÉO: Usar EXATAMENTE a mesma normaliza√ß√£o do cadastro
                // Normalizar para [-1, 1] como no CameraActivity (cadastro)
                val r = ((pixel shr 16) and 0xFF) / 127.5f - 1.0f
                val g = ((pixel shr 8) and 0xFF) / 127.5f - 1.0f
                val b = (pixel and 0xFF) / 127.5f - 1.0f
                
                // ‚úÖ VALIDA√á√ÉO: Garantir que n√£o s√£o NaN ou infinitos
                val rFinal = if (r.isNaN() || r.isInfinite()) 0.0f else r
                val gFinal = if (g.isNaN() || g.isInfinite()) 0.0f else g
                val bFinal = if (b.isNaN() || b.isInfinite()) 0.0f else b

                byteBuffer.putFloat(rFinal)
                byteBuffer.putFloat(gFinal)
                byteBuffer.putFloat(bFinal)
                pixelCount++
            }
            
            Log.d(TAG, "‚úÖ Tensor preenchido com $pixelCount pixels")
            
            // Limpar bitmap tempor√°rio se foi criado
            if (resizedBitmap != bitmap) {
                resizedBitmap.recycle()
            }

            return byteBuffer
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro em convertBitmapToTensorInput", e)
            throw e
        }
    }
    

    
    private fun createTestEmployeeIfNeeded() {
        CoroutineScope(Dispatchers.IO).launch {
            try {
                val db = AppDatabase.getInstance(this@PontoActivity)
                val funcionarioDao = db.usuariosDao()
                
                // Verificar se h√° funcion√°rios cadastrados
                val funcionarios = funcionarioDao.getUsuario()
                
                if (funcionarios.isEmpty()) {
                    Log.d(TAG, "üìù Criando funcion√°rio de teste...")
                    
                    // Criar funcion√°rio de teste
                    val funcionarioTeste = FuncionariosEntity(
                        id = 1,
                        codigo = "TEST001",
                        nome = "Funcion√°rio Teste",
                        ativo = 1
                    )
                    
                    funcionarioDao.insert(funcionarioTeste)
                    
                    Log.d(TAG, "‚úÖ Funcion√°rio de teste criado: ${funcionarioTeste.nome}")
                    
                    withContext(Dispatchers.Main) {
                        Toast.makeText(this@PontoActivity, 
                            "üë§ Funcion√°rio de teste criado!\nPrimeiro registre seu rosto via menu principal", 
                            Toast.LENGTH_LONG).show()
                    }
                } else {
                    Log.d(TAG, "üë• ${funcionarios.size} funcion√°rio(s) j√° cadastrado(s)")
                }
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao criar funcion√°rio de teste: ${e.message}")
            }
        }
    }

    private suspend fun verificarIntegridadeFaces() {
        try {
            Log.d(TAG, "üîç Verificando integridade das faces...")
            
            // Verificar integridade
            faceRecognitionHelper?.verificarIntegridadeFaces()
            
            // Limpar faces duplicadas
            faceRecognitionHelper?.limparFacesDuplicadas()
            
            Log.d(TAG, "‚úÖ Verifica√ß√£o de integridade conclu√≠da")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro na verifica√ß√£o de integridade: ${e.message}", e)
        }
    }
    
    /**
     * ‚úÖ NOVA FUN√á√ÉO: Verifica e corrige problemas de reconhecimento
     */
    private suspend fun verificarECorrigirProblemasReconhecimento() {
        try {
            Log.d(TAG, "üîß Verificando e corrigindo problemas de reconhecimento...")
            
            // Executar verifica√ß√£o completa
            faceRecognitionHelper?.verificarECorrigirProblemasReconhecimento()
            
            // Listar problemas encontrados
            val problemas = faceRecognitionHelper?.listarFuncionariosComProblemas()
            if (!problemas.isNullOrEmpty()) {
                Log.w(TAG, "‚ö†Ô∏è Problemas encontrados:")
                problemas.forEach { problema ->
                    Log.w(TAG, "   $problema")
                }
            } else {
                Log.d(TAG, "‚úÖ Nenhum problema encontrado")
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao verificar problemas: ${e.message}")
        }
    }
    
    /**
     * ‚úÖ NOVA FUN√á√ÉO: Resetar estado de reconhecimento
     */
    private fun resetarEstadoReconhecimento() {
        try {
            Log.d(TAG, "üîÑ === RESETANDO ESTADO DE RECONHECIMENTO ===")
            
            // ‚úÖ CORRE√á√ÉO: Verificar se activity ainda √© v√°lida
            if (isFinishing || isDestroyed) {
                Log.w(TAG, "‚ö†Ô∏è Activity finalizada, cancelando reset")
                return
            }
            
            funcionarioReconhecido = null
            processandoFace = false
            lastProcessingTime = 0L // ‚úÖ NOVA: Resetar tempo de processamento
            pontoJaRegistrado = false // ‚úÖ NOVA: Permitir novos registros
            ultimoFuncionarioReconhecido = null // ‚úÖ NOVA: Limpar √∫ltimo funcion√°rio
            currentFaceBitmap = null
            
            // ‚úÖ CORRE√á√ÉO: Verificar se as views est√£o inicializadas E activity v√°lida
            try {
                if (::statusText.isInitialized && !isFinishing && !isDestroyed) {
                    statusText.text = "üì∑ Posicione seu rosto na c√¢mera"
                } else {
                    Log.w(TAG, "‚ö†Ô∏è statusText n√£o dispon√≠vel para reset")
                }
                
                if (::funcionarioInfo.isInitialized && !isFinishing && !isDestroyed) {
                    funcionarioInfo.visibility = View.GONE
                } else {
                    Log.w(TAG, "‚ö†Ô∏è funcionarioInfo n√£o dispon√≠vel para reset")
                }
                
                // ‚úÖ CORRE√á√ÉO: Limpar overlay tamb√©m
                if (::overlay.isInitialized && !isFinishing && !isDestroyed) {
                    overlay.clear()
                }
            } catch (e: Exception) {
                Log.w(TAG, "‚ö†Ô∏è Erro ao resetar views: ${e.message}")
            }
            
            Log.d(TAG, "‚úÖ Estado resetado com sucesso")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro cr√≠tico no reset: ${e.message}", e)
        }
    }
    
    /**
     * ‚úÖ NOVA FUN√á√ÉO: For√ßar reset do estado (para casos de emerg√™ncia)
     */
    /**
     * ‚úÖ NOVA FUN√á√ÉO: Pausar timeout durante processamentos importantes
     */
    private fun pausarTimeout(motivo: String) {
        timeoutPausado = true
        Log.d(TAG, "‚è∏Ô∏è Timeout pausado: $motivo")
    }
    
    /**
     * ‚úÖ NOVA FUN√á√ÉO: Retomar timeout
     */
    private fun retomarTimeout(motivo: String) {
        timeoutPausado = false
        lastFaceDetectionTime = System.currentTimeMillis() // Reset do timer de face
        Log.d(TAG, "‚ñ∂Ô∏è Timeout retomado: $motivo")
    }

    /**
     * ‚úÖ NOVA FUN√á√ÉO: Voltar para tela inicial de forma segura
     */
    private fun voltarParaTelaInicial(motivo: String) {
        try {
            Log.w(TAG, "üè† === VOLTANDO PARA TELA INICIAL ===")
            Log.w(TAG, "üìã Motivo: $motivo")
            
            // Mostrar mensagem para o usu√°rio
            runOnUiThread {
                try {
                    if (!isFinishing && !isDestroyed) {
                        Toast.makeText(this, "Retornando √† tela inicial: $motivo", Toast.LENGTH_LONG).show()
                        
                        // Limpar estado
                        forcarResetEstado()
                        
                        // Voltar para HomeActivity de forma mais segura
                        val intent = Intent(this, HomeActivity::class.java)
                        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)
                        intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)
                        startActivity(intent)
                        finish()
                    }
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå Erro ao voltar para tela inicial: ${e.message}")
                    // Em caso de erro, tentar finalizar a activity
                    try {
                        finish()
                    } catch (e2: Exception) {
                        Log.e(TAG, "‚ùå Erro cr√≠tico ao finalizar activity: ${e2.message}")
                    }
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro cr√≠tico ao voltar para tela inicial: ${e.message}")
        }
    }

    private fun forcarResetEstado() {
        try {
            Log.d(TAG, "üö® === FOR√áANDO RESET DO ESTADO ===")
            processandoFace = false
            lastProcessingTime = 0L // ‚úÖ NOVA: Resetar tempo de processamento
            pontoJaRegistrado = false // ‚úÖ NOVA: Permitir novos registros
            ultimoFuncionarioReconhecido = null // ‚úÖ NOVA: Limpar √∫ltimo funcion√°rio
            funcionarioReconhecido = null
            
            // ‚úÖ CORRE√á√ÉO: Limpar bitmap de forma segura
            currentFaceBitmap?.let { bitmap ->
                try {
                    if (!bitmap.isRecycled) {
                        bitmap.recycle()
                    } else {
                        // Bitmap j√° foi reciclado
                    }
                } catch (e: Exception) {
                    Log.w(TAG, "‚ö†Ô∏è Erro ao reciclar bitmap: ${e.message}")
                }
            }
            currentFaceBitmap = null
            
            // ‚úÖ NOVO: Resetar tempos de timeout e retomar
            lastFaceDetectionTime = System.currentTimeMillis()
            retomarTimeout("Reset de estado")
            
            // Resetar UI
            try {
                if (::statusText.isInitialized && !isFinishing && !isDestroyed) {
                    statusText.text = "üì∑ Posicione seu rosto na c√¢mera"
                }
                if (::funcionarioInfo.isInitialized && !isFinishing && !isDestroyed) {
                    funcionarioInfo.visibility = View.GONE
                }
            } catch (e: Exception) {
                Log.w(TAG, "‚ö†Ô∏è Erro ao resetar UI: ${e.message}")
            }
            
            Log.d(TAG, "‚úÖ Reset for√ßado conclu√≠do")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro no reset for√ßado: ${e.message}")
        }
    }
    
    /**
     * ‚úÖ FUN√á√ÉO REMOVIDA: resetarAposPonto causava conflito
     * Agora o dialog gerencia o fechamento da activity diretamente
     */

    private fun allPermissionsGranted() = REQUIRED_PERMISSIONS.all {
        ContextCompat.checkSelfPermission(baseContext, it) == PackageManager.PERMISSION_GRANTED
    }
    
    // ‚úÖ NOVA: Verificar permiss√µes de localiza√ß√£o
    private fun allLocationPermissionsGranted() = LOCATION_PERMISSIONS.any {
        ContextCompat.checkSelfPermission(baseContext, it) == PackageManager.PERMISSION_GRANTED
    }

    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        when (requestCode) {
            REQUEST_CODE_PERMISSIONS -> {
                if (allPermissionsGranted()) {
                    // ‚úÖ NOVA: Verificar permiss√µes de localiza√ß√£o tamb√©m
                    if (!allLocationPermissionsGranted()) {
                        ActivityCompat.requestPermissions(this, LOCATION_PERMISSIONS, REQUEST_CODE_LOCATION_PERMISSIONS)
                    }
                    startCamera()
                } else {
                    Toast.makeText(this, "Permiss√µes de c√¢mera necess√°rias", Toast.LENGTH_LONG).show()
                    finish()
                }
            }
            REQUEST_CODE_LOCATION_PERMISSIONS -> {
                if (allLocationPermissionsGranted()) {
                    Log.d(TAG, "‚úÖ Permiss√µes de localiza√ß√£o concedidas")
                    Toast.makeText(this, "‚úÖ Localiza√ß√£o habilitada para pontos", Toast.LENGTH_SHORT).show()
                } else {
                    Log.w(TAG, "‚ö†Ô∏è Permiss√µes de localiza√ß√£o negadas - pontos ser√£o registrados sem coordenadas")
                    Toast.makeText(this, "‚ö†Ô∏è Localiza√ß√£o negada - pontos sem coordenadas", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        try {
            Log.d(TAG, "üóëÔ∏è === LIMPANDO RECURSOS NO onDestroy ===")
            
            // ‚úÖ OTIMIZA√á√ÉO: Parar monitor de estado para evitar memory leaks
            stopStateMonitor()
            
            // ‚úÖ OTIMIZA√á√ÉO: Parar c√¢mera para evitar memory leaks
            stopCamera()
            
            // ‚úÖ OTIMIZA√á√ÉO: Limpar bitmap atual de forma mais segura
            currentFaceBitmap?.let { bitmap ->
                try {
                    if (!bitmap.isRecycled) {
                        bitmap.recycle()
                        Log.d(TAG, "üñºÔ∏è Bitmap reciclado")
                    }
                } catch (e: Exception) {
                    Log.w(TAG, "‚ö†Ô∏è Erro ao reciclar bitmap no onDestroy: ${e.message}")
                }
            }
            currentFaceBitmap = null
            
            // ‚úÖ OTIMIZA√á√ÉO: Limpar cache do helper para liberar mem√≥ria
            try {
                faceRecognitionHelper?.clearCache()
                faceRecognitionHelper = null
                Log.d(TAG, "üß† Cache do face recognition limpo")
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao limpar cache: ${e.message}")
            }
            
            // ‚úÖ OTIMIZA√á√ÉO: Limpar helper de localiza√ß√£o
            locationHelper = null
            
            // ‚úÖ OTIMIZA√á√ÉO: Limpar interpreter de forma mais segura
            try {
                if (interpreter != null) {
                    interpreter?.close()
                    interpreter = null
                    Log.d(TAG, "ü§ñ TensorFlow interpreter fechado")
                }
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao fechar interpreter: ${e.message}")
            }
            
            // ‚úÖ OTIMIZA√á√ÉO: Limpar face detector de forma mais segura
            try {
                faceDetector.close()
                Log.d(TAG, "üë§ Face detector fechado")
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao fechar face detector: ${e.message}")
            }
            
            // ‚úÖ OTIMIZA√á√ÉO: For√ßar garbage collection e monitorar mem√≥ria final
            logMemoryUsage("Antes limpeza final")
            System.gc()
            
            // Aguardar um pouco e verificar novamente
            Handler(Looper.getMainLooper()).postDelayed({
                logMemoryUsage("Ap√≥s limpeza final")
            }, 100)
            
            Log.d(TAG, "‚úÖ Todos os recursos liberados no onDestroy")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao fechar recursos: ${e.message}")
            e.printStackTrace()
        }
    }
    
    override fun onPause() {
        super.onPause()
        Log.d(TAG, "üì± onPause - pausando c√¢mera para economizar recursos")
        
        try {
            // ‚úÖ CORRE√á√ÉO: Parar c√¢mera para economizar mem√≥ria e recursos
            stopCamera()
            
            // ‚úÖ NOVA: Pausar timeout para evitar fechamento durante pausa
            pausarTimeout("Activity pausada")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro no onPause: ${e.message}")
        }
    }
    
    override fun onResume() {
        super.onResume()
        Log.d(TAG, "üì± onResume - retomando atividade")
        
        try {
            // ‚úÖ CORRE√á√ÉO: Reset imediato se processandoFace est√° travado
            if (processandoFace) {
                Log.w(TAG, "‚ö†Ô∏è processandoFace travado no onResume, resetando imediatamente")
                forcarResetEstado()
            }
            
            // ‚úÖ NOVA: Retomar timeout
            retomarTimeout("Activity retomada")
            
            // ‚úÖ CORRE√á√ÉO: Reiniciar c√¢mera se permiss√µes est√£o ok
            if (allPermissionsGranted()) {
                startCamera()
            }
            
            // ‚úÖ CORRE√á√ÉO: Aguardar um pouco antes de resetar para evitar conflitos
            Handler(Looper.getMainLooper()).postDelayed({
                try {
                    forcarResetEstado()
                    Log.d(TAG, "üìä Estado no onResume: processandoFace = $processandoFace")
                    
                    // ‚úÖ CORRE√á√ÉO: Verificar se o modelo est√° carregado
                    if (!modelLoaded) {
                        Log.w(TAG, "‚ö†Ô∏è Modelo n√£o carregado no onResume, recarregando...")
                        loadTensorFlowModel()
                    }
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå Erro no reset no onResume: ${e.message}")
                }
            }, 500) // Aguardar 500ms
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro no onResume: ${e.message}")
        }
    }

    /**
     * ‚úÖ FUN√á√ÉO SIMPLIFICADA: Registrar ponto com tratamento de erro
     */
    private suspend fun registrarPonto(funcionario: FuncionariosEntity) {
        try {
            val horarioAtual = System.currentTimeMillis()
            val formato = SimpleDateFormat("dd/MM/yyyy HH:mm:ss", Locale.getDefault())
            val dataFormatada = formato.format(Date(horarioAtual))
            
            // ‚úÖ Capturar geolocaliza√ß√£o
            var latitude: Double? = null
            var longitude: Double? = null
            
            try {
                val locationData = locationHelper?.getCurrentLocationForPoint()
                if (locationData != null) {
                    latitude = locationData.latitude
                    longitude = locationData.longitude
                    Log.d(TAG, "üåç Localiza√ß√£o capturada: $latitude, $longitude")
                } else {
                    Log.w(TAG, "‚ö†Ô∏è Localiza√ß√£o n√£o dispon√≠vel para este ponto")
                }
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao capturar localiza√ß√£o: ${e.message}")
            }
            
            // ‚úÖ Converter foto para base64
            val fotoBase64 = try {
                currentFaceBitmap?.let { bitmap ->
                    if (!bitmap.isRecycled) {
                        bitmapToBase64(bitmap, 80)
                    } else {
                        Log.w(TAG, "‚ö†Ô∏è Bitmap da face foi reciclado")
                        null
                    }
                }
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao converter foto para base64: ${e.message}")
                null
            }
            
            if (fotoBase64 != null) {
                Log.d(TAG, "üì∏ Foto convertida para base64: ${fotoBase64.length} caracteres")
            } else {
                Log.w(TAG, "‚ö†Ô∏è Nenhuma foto ser√° enviada com o ponto")
            }
            
            // Criar ponto
            val ponto = PontosGenericosEntity(
                funcionarioId = funcionario.codigo,
                funcionarioNome = funcionario.nome ?: "Funcion√°rio",
                funcionarioMatricula = funcionario.matricula ?: "",
                funcionarioCpf = funcionario.cpf ?: "",
                funcionarioCargo = funcionario.cargo ?: "",
                funcionarioSecretaria = funcionario.secretaria ?: "",
                funcionarioLotacao = funcionario.lotacao ?: "",
                tipoPonto = "PONTO",
                dataHora = horarioAtual,
                latitude = latitude,
                longitude = longitude,
                fotoBase64 = fotoBase64
            )
            
            // Salvar no banco
            AppDatabase.getInstance(this@PontoActivity).pontosGenericosDao().insert(ponto)
            Log.d(TAG, "üíæ Ponto registrado: ${funcionario.nome}")
            
            // Salvar para sincroniza√ß√£o
            try {
                val pontoService = PontoSincronizacaoService()
                pontoService.salvarPontoParaSincronizacao(
                    this@PontoActivity,
                    funcionario.codigo,
                    funcionario.nome ?: "Funcion√°rio",
                    "ponto",
                    fotoBase64,
                    latitude,
                    longitude
                )
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro na sincroniza√ß√£o: ${e.message}")
            }
            
            // ‚úÖ Mostrar sucesso
            withContext(Dispatchers.Main) {
                try {
                    val toastLocationText = if (latitude != null && longitude != null) {
                        "\nüìç ${String.format("%.4f", latitude)}, ${String.format("%.4f", longitude)}"
                    } else {
                        ""
                    }
                    
                    Toast.makeText(this@PontoActivity, 
                        "‚úÖ Ponto registrado!\n${funcionario.nome}\n$dataFormatada$toastLocationText", 
                        Toast.LENGTH_LONG).show()
                    
                    // Reset autom√°tico ap√≥s 20 segundos
                    Handler(Looper.getMainLooper()).postDelayed({
                        pontoJaRegistrado = false
                        ultimoFuncionarioReconhecido = null
                    }, 20000)
                    
                    val locationText = if (latitude != null && longitude != null) {
                        "\nüìç ${String.format("%.6f", latitude)}, ${String.format("%.6f", longitude)}"
                    } else {
                        "\n‚ö†Ô∏è Sem localiza√ß√£o"
                    }
                    
                    statusText.text = "‚úÖ Ponto registrado!\n${funcionario.nome}\n$dataFormatada$locationText\n\nClique 'Voltar' para sair"
                    
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå Erro ao mostrar sucesso: ${e.message}")
                }
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao registrar ponto: ${e.message}")
            throw e
        } finally {
            processandoFace = false
            lastProcessingTime = 0L
            retomarTimeout("Processamento de ponto conclu√≠do")
        }
    }
} 