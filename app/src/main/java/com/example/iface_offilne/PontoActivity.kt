package com.example.iface_offilne

import android.Manifest
import android.app.AlertDialog
import android.content.Intent
import android.content.pm.PackageManager
import android.graphics.*
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.util.Log
import android.view.View
import android.widget.*
import androidx.appcompat.app.AppCompatActivity
import androidx.camera.core.*
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import com.example.iface_offilne.data.AppDatabase
import com.example.iface_offilne.data.FuncionariosEntity
import com.example.iface_offilne.data.PontosGenericosEntity
import com.example.iface_offilne.service.PontoSincronizacaoService
import com.example.iface_offilne.helpers.FaceRecognitionHelper
import com.example.iface_offilne.helpers.bitmapToBase64
import com.example.iface_offilne.helpers.bitmapToFloatArray
import com.example.iface_offilne.helpers.cropFace
import com.example.iface_offilne.helpers.fixImageOrientationDefinitive
import com.example.iface_offilne.helpers.toBitmap
import com.example.iface_offilne.databinding.ActivityPontoBinding
import com.example.iface_offilne.util.FaceOverlayView
import com.google.mlkit.vision.common.InputImage
import com.google.mlkit.vision.face.FaceDetection
import com.google.mlkit.vision.face.FaceDetectorOptions
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import kotlinx.coroutines.delay
import kotlinx.coroutines.withTimeout
import org.tensorflow.lite.Interpreter
import java.io.FileInputStream
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.channels.FileChannel
import java.text.SimpleDateFormat
import java.util.*
import kotlinx.coroutines.TimeoutCancellationException

class PontoActivity : AppCompatActivity() {

    private lateinit var binding: ActivityPontoBinding
    private lateinit var previewView: PreviewView
    private lateinit var imageAnalyzer: ImageAnalysis
    private lateinit var overlay: FaceOverlayView
    private lateinit var statusText: TextView
    private lateinit var funcionarioInfo: LinearLayout
    private lateinit var funcionarioNome: TextView
    private lateinit var ultimoPonto: TextView
    private lateinit var tipoPontoRadioGroup: RadioGroup

    private var interpreter: Interpreter? = null
    private var modelLoaded = false
    private var modelInputWidth = 160
    private var modelInputHeight = 160
    private var modelOutputSize = 512 // ‚úÖ CORRE√á√ÉO: Ajustar para o tamanho real do modelo

    private var faceRecognitionHelper: com.example.iface_offilne.helpers.FaceRecognitionHelper? = null
    private var funcionarioReconhecido: FuncionariosEntity? = null
    private var processandoFace = false
    private var currentFaceBitmap: Bitmap? = null // Para armazenar a foto da face
    private var lastProcessingTime = 0L // ‚úÖ NOVA: Controle de timeout
    private var processingTimeout = 10000L // ‚úÖ NOVA: 10 segundos de timeout
    private var pontoJaRegistrado = false // ‚úÖ NOVA: Controle para evitar registros duplicados
    private var ultimoFuncionarioReconhecido: String? = null // ‚úÖ NOVA: Controle do √∫ltimo funcion√°rio

    companion object {
        private const val REQUEST_CODE_PERMISSIONS = 10
        private val REQUIRED_PERMISSIONS = arrayOf(Manifest.permission.CAMERA)
        private const val TAG = "PontoActivity"
    }

    private var faceDetector = FaceDetection.getClient(
        FaceDetectorOptions.Builder()
            .setPerformanceMode(FaceDetectorOptions.PERFORMANCE_MODE_FAST)
            .setLandmarkMode(FaceDetectorOptions.LANDMARK_MODE_NONE)
            .setClassificationMode(FaceDetectorOptions.CLASSIFICATION_MODE_NONE)
            .build()
    )

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        // Inicializar binding
        binding = ActivityPontoBinding.inflate(layoutInflater)
        setContentView(binding.root)
        
        // Configurar para uso completo da tela
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {
            window.statusBarColor = ContextCompat.getColor(this, android.R.color.transparent)
            window.navigationBarColor = ContextCompat.getColor(this, android.R.color.transparent)
        }
        
        setupUI()
        
        // ‚úÖ CORRE√á√ÉO: Resetar estado AP√ìS setupUI
        resetarEstadoReconhecimento()
        
        // ‚úÖ CORRE√á√ÉO: Garantir que processandoFace come√ßa como false
        processandoFace = false
        lastProcessingTime = 0L // ‚úÖ NOVA: Garantir que o tempo tamb√©m come√ßa zerado
        pontoJaRegistrado = false // ‚úÖ NOVA: Garantir que n√£o h√° registro pendente
        ultimoFuncionarioReconhecido = null // ‚úÖ NOVA: Limpar √∫ltimo funcion√°rio
        Log.d(TAG, "üöÄ === INICIANDO SISTEMA DE PONTO ===")
        Log.d(TAG, "üìä Estado inicial: processandoFace = $processandoFace, lastProcessingTime = $lastProcessingTime")

        // Inicializar helper de reconhecimento facial
        faceRecognitionHelper = com.example.iface_offilne.helpers.FaceRecognitionHelper(this)

        // Carregar modelo TensorFlow
        loadTensorFlowModel()
        
        // Criar funcion√°rio de teste se n√£o existir
        createTestEmployeeIfNeeded()
        
        // Remover backgroundTint do bot√£o voltar
        binding.btnVoltar.backgroundTintList = null

        // Solicitar permiss√µes
        if (allPermissionsGranted()) {
            startCamera()
        } else {
            ActivityCompat.requestPermissions(this, REQUIRED_PERMISSIONS, REQUEST_CODE_PERMISSIONS)
        }
        
        // Verificar integridade das faces e limpar duplicatas
        CoroutineScope(Dispatchers.IO).launch {
            try {
                verificarIntegridadeFaces()
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao verificar integridade: ${e.message}")
            }
        }
        
        // ‚úÖ NOVA FUN√á√ÉO: Verificar e corrigir problemas de reconhecimento
        CoroutineScope(Dispatchers.IO).launch {
            try {
                verificarECorrigirProblemasReconhecimento()
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao verificar problemas de reconhecimento: ${e.message}")
            }
        }
        
        // ‚úÖ NOVA FUN√á√ÉO: Monitor de estado para evitar travamento
        startStateMonitor()
    }
    
    /**
     * ‚úÖ NOVA FUN√á√ÉO: Monitor de estado para evitar travamento
     */
    private fun startStateMonitor() {
        Handler(Looper.getMainLooper()).postDelayed(object : Runnable {
            override fun run() {
                try {
                    // Verificar se o estado est√° travado
                    if (processandoFace) {
                        Log.d(TAG, "üîç Monitor: processandoFace = true, verificando se n√£o travou...")
                        
                        val currentTime = System.currentTimeMillis()
                        val timeSinceStart = currentTime - lastProcessingTime
                        
                        // Se estiver processando h√° muito tempo sem resultado, resetar
                        if (timeSinceStart > processingTimeout) {
                            Log.w(TAG, "‚ö†Ô∏è Monitor: Estado travado h√° ${timeSinceStart}ms, resetando...")
                            forcarResetEstado()
                        } else if (funcionarioReconhecido == null && timeSinceStart > 5000) {
                            Log.w(TAG, "‚ö†Ô∏è Monitor: Processando h√° ${timeSinceStart}ms sem resultado, resetando...")
                            forcarResetEstado()
                        }
                    }
                    
                    // Verificar se o modelo est√° carregado
                    if (!modelLoaded) {
                        Log.w(TAG, "‚ö†Ô∏è Monitor: Modelo n√£o carregado, tentando recarregar...")
                        loadTensorFlowModel()
                    }
                    
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå Erro no monitor de estado: ${e.message}")
                }
                
                // Agendar pr√≥xima verifica√ß√£o em 3 segundos (mais frequente)
                if (!isFinishing && !isDestroyed) {
                    Handler(Looper.getMainLooper()).postDelayed(this, 3000)
                }
            }
        }, 3000) // Primeira verifica√ß√£o em 3 segundos
    }

    private fun setupUI() {
        try {
            Log.d(TAG, "üîß Configurando UI...")
            
            // Configurar padding para status bar
            binding.mainLayout.setPadding(0, getStatusBarHeight(), 0, 0)
            
            // Referenciar views usando binding
            statusText = binding.statusText
            previewView = binding.previewView
            overlay = binding.overlay
            funcionarioInfo = binding.funcionarioInfo
            funcionarioNome = binding.funcionarioNome
            ultimoPonto = binding.ultimoPonto
            tipoPontoRadioGroup = binding.tipoPontoRadioGroup
            
            // Configurar bot√£o voltar
            binding.btnVoltar.setOnClickListener { 
                // ‚úÖ CORRE√á√ÉO: Reset manual do processandoFace
                Log.d(TAG, "üîÑ Reset manual do processandoFace")
                forcarResetEstado()
                
                // Redirecionar para configura√ß√µes
                val intent = Intent(this, ConfiguracoesActivity::class.java)
                startActivity(intent)
            }
            
            // ‚úÖ NOVA: Bot√£o de reset de emerg√™ncia (long press no bot√£o voltar)
            binding.btnVoltar.setOnLongClickListener {
                Log.d(TAG, "üö® Reset de emerg√™ncia ativado")
                forcarResetEstado()
                Toast.makeText(this, "üîÑ Sistema resetado", Toast.LENGTH_SHORT).show()
                true
            }
            
            Log.d(TAG, "‚úÖ UI configurada com sucesso")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao configurar UI", e)
            // Fallback simples
            val errorLayout = LinearLayout(this).apply {
                orientation = LinearLayout.VERTICAL
                gravity = android.view.Gravity.CENTER
                setBackgroundColor(Color.WHITE)
            }
            
            val errorText = TextView(this).apply {
                text = "‚ùå Erro ao carregar interface\nTente novamente"
                textSize = 18f
                gravity = android.view.Gravity.CENTER
                setTextColor(Color.RED)
                setPadding(32, 32, 32, 32)
            }
            
            errorLayout.addView(errorText)
            setContentView(errorLayout)
        }
    }

    private fun loadTensorFlowModel() {
        try {
            Log.d(TAG, "üîÑ Carregando modelo TensorFlow...")
            
            // ‚úÖ CORRE√á√ÉO: Verificar se o contexto ainda √© v√°lido
            if (isFinishing || isDestroyed) {
                Log.w(TAG, "‚ö†Ô∏è Activity finalizada, cancelando carregamento do modelo")
                return
            }
            
            // Tentar carregar primeiro dos assets
            val modelFile = try {
                assets.open("facenet_model.tflite")
            } catch (e: Exception) {
                Log.w(TAG, "facenet_model.tflite n√£o encontrado em assets, tentando mobilefacenet...")
                // Fallback para o modelo raw
                try {
                    resources.openRawResource(R.raw.mobilefacenet)
                } catch (e2: Exception) {
                    Log.e(TAG, "‚ùå Nenhum modelo encontrado: ${e2.message}")
                    throw e2
                }
            }
            
            val modelBuffer = modelFile.use { input ->
                val bytes = ByteArray(input.available())
                input.read(bytes)
                ByteBuffer.allocateDirect(bytes.size).apply {
                    order(ByteOrder.nativeOrder())
                    put(bytes)
                    rewind()
                }
            }
            
            // ‚úÖ CORRE√á√ÉO: Verificar se o buffer √© v√°lido
            if (modelBuffer.capacity() <= 0) {
                throw IllegalStateException("Modelo vazio ou inv√°lido")
            }
            
            val options = Interpreter.Options().apply {
                setNumThreads(1) // ‚úÖ CORRE√á√ÉO: Usar apenas 1 thread para evitar conflitos
                setUseNNAPI(false)
                setAllowFp16PrecisionForFp32(false) // ‚úÖ CORRE√á√ÉO: For√ßar precis√£o FP32
            }
            
            // ‚úÖ CORRE√á√ÉO: Criar interpreter com prote√ß√£o
            interpreter = try {
                Interpreter(modelBuffer, options)
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao criar interpreter: ${e.message}")
                null
            }
            
            // ‚úÖ CORRE√á√ÉO: Verificar se o interpreter foi criado corretamente
            interpreter?.let { interp ->
                try {
                    interp.allocateTensors()
                    modelLoaded = true
                    Log.d(TAG, "‚úÖ Modelo TensorFlow carregado com sucesso")
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå Erro ao alocar tensores: ${e.message}")
                    interpreter = null
                    modelLoaded = false
                    throw e
                }
            } ?: run {
                Log.e(TAG, "‚ùå Falha ao criar interpreter")
                modelLoaded = false
                throw IllegalStateException("Interpreter n√£o foi criado")
            }
            
            // Verificar dimens√µes do modelo
            val inputTensor = interpreter?.getInputTensor(0)
            val outputTensor = interpreter?.getOutputTensor(0)
            
            if (inputTensor != null && outputTensor != null) {
                val inputShape = inputTensor.shape()
                val outputShape = outputTensor.shape()
                
                Log.d(TAG, "üìä Dimens√µes do modelo:")
                Log.d(TAG, "   Input: ${inputShape.contentToString()}")
                Log.d(TAG, "   Output: ${outputShape.contentToString()}")
                
                // Atualizar dimens√µes baseado no modelo real
                if (inputShape.size >= 4) {
                    modelInputHeight = inputShape[1]
                    modelInputWidth = inputShape[2]
                    Log.d(TAG, "‚úÖ Dimens√µes atualizadas: ${modelInputWidth}x${modelInputHeight}")
                }
                
                if (outputShape.size >= 2) {
                    modelOutputSize = outputShape[1]
                    Log.d(TAG, "‚úÖ Tamanho de sa√≠da atualizado: $modelOutputSize")
                }
            }
            
            modelLoaded = true
            Log.d(TAG, "‚úÖ Modelo TensorFlow carregado com sucesso")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao carregar modelo: ${e.message}", e)
            modelLoaded = false
        }
    }

    private fun startCamera() {
        Log.d(TAG, "üì∑ === INICIANDO C√ÇMERA ===")
        val cameraProviderFuture = ProcessCameraProvider.getInstance(this)

        cameraProviderFuture.addListener({
            val cameraProvider: ProcessCameraProvider = cameraProviderFuture.get()

            val preview = Preview.Builder().build().also {
                it.setSurfaceProvider(previewView.surfaceProvider)
            }

            imageAnalyzer = ImageAnalysis.Builder()
                .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
                .build()
                .also {
                    it.setAnalyzer(ContextCompat.getMainExecutor(this)) { imageProxy ->
                        // ‚úÖ CORRE√á√ÉO: SEMPRE processar imagem, deixar a l√≥gica interna decidir
                        processImage(imageProxy)
                    }
                }

            val cameraSelector = CameraSelector.DEFAULT_FRONT_CAMERA

            try {
                cameraProvider.unbindAll()
                cameraProvider.bindToLifecycle(this, cameraSelector, preview, imageAnalyzer)
                Log.d(TAG, "‚úÖ C√¢mera iniciada com sucesso")
            } catch (exc: Exception) {
                Log.e(TAG, "‚ùå Falha ao iniciar c√¢mera", exc)
            }

        }, ContextCompat.getMainExecutor(this))
    }

    private fun processImage(imageProxy: ImageProxy) {
        try {
            val mediaImage = imageProxy.image
            if (mediaImage != null) {
                // ‚úÖ CORRE√á√ÉO: Verificar se a imagem √© v√°lida
                if (mediaImage.width <= 0 || mediaImage.height <= 0) {
                    Log.w(TAG, "‚ö†Ô∏è Imagem inv√°lida: ${mediaImage.width}x${mediaImage.height}")
                    imageProxy.close()
                    return
                }
                
                val image = InputImage.fromMediaImage(mediaImage, imageProxy.imageInfo.rotationDegrees)

                faceDetector.process(image)
                    .addOnSuccessListener { faces ->
                        try {
                            if (faces.isNotEmpty()) {
                                val face = faces[0]
                                
                                // ‚úÖ CORRE√á√ÉO: Verificar se o boundingBox √© v√°lido
                                if (face.boundingBox.width() <= 0 || face.boundingBox.height() <= 0) {
                                    Log.w(TAG, "‚ö†Ô∏è BoundingBox inv√°lido: ${face.boundingBox}")
                                    overlay.clear()
                                    imageProxy.close()
                                    return@addOnSuccessListener
                                }
                                
                                overlay.setBoundingBox(face.boundingBox, mediaImage.width, mediaImage.height)

                                // Verificar dist√¢ncia da face
                                val faceArea = face.boundingBox.width() * face.boundingBox.height()
                                val screenArea = mediaImage.width * mediaImage.height
                                val faceRatio = faceArea.toFloat() / screenArea.toFloat()
                                
                                Log.d(TAG, "üìè Face ratio: $faceRatio (√°rea face: $faceArea, √°rea tela: $screenArea)")
                                
                                // ‚úÖ CORRE√á√ÉO: Verificar se h√° timeout apenas se estiver processando
                                if (processandoFace) {
                                    val currentTime = System.currentTimeMillis()
                                    if (currentTime - lastProcessingTime > processingTimeout) {
                                        Log.w(TAG, "‚ö†Ô∏è Timeout detectado, resetando processandoFace")
                                        processandoFace = false
                                        lastProcessingTime = 0L
                                        try {
                                            if (::statusText.isInitialized && !isFinishing && !isDestroyed) {
                                                statusText.text = "üì∑ Posicione seu rosto na c√¢mera"
                                            }
                                        } catch (e: Exception) {
                                            Log.e(TAG, "‚ùå Erro ao resetar status: ${e.message}")
                                        }
                                    }
                                }
                                
                                // ‚úÖ CORRE√á√ÉO: Atualizar status baseado na posi√ß√£o da face
                                if (!processandoFace) {
                                    if (faceRatio < 0.08f) {
                                        statusText.text = "üì∑ Aproxime mais seu rosto"
                                    } else if (!overlay.isFaceInOval(face.boundingBox)) {
                                        statusText.text = "üì∑ Centralize seu rosto no oval"
                                    } else {
                                        statusText.text = "üîç Pronto para reconhecer..."
                                    }
                                }
                                
                                // ‚úÖ CORRE√á√ÉO: Iniciar reconhecimento apenas quando face estiver bem posicionada
                                if (overlay.isFaceInOval(face.boundingBox) && faceRatio >= 0.08f && !processandoFace) {
                                    // ‚úÖ CORRE√á√ÉO: Verificar se o modelo est√° carregado antes de processar
                                    if (!modelLoaded || interpreter == null) {
                                        Log.w(TAG, "‚ö†Ô∏è Modelo n√£o carregado, aguardando...")
                                        statusText.text = "‚è≥ Carregando modelo..."
                                        imageProxy.close()
                                        return@addOnSuccessListener
                                    }
                                    
                                    processandoFace = true
                                    lastProcessingTime = System.currentTimeMillis()
                                    Log.d(TAG, "üë§ === INICIANDO RECONHECIMENTO FACIAL ===")
                                    statusText.text = "üîç Reconhecendo..."
                                    
                                    try {
                                        // Converter para bitmap antes de fechar o proxy
                                        val bitmap = toBitmap(mediaImage)
                                        
                                        // ‚úÖ CORRE√á√ÉO: Verificar se o bitmap foi criado corretamente
                                        if (bitmap.isRecycled || bitmap.width <= 0 || bitmap.height <= 0) {
                                            Log.e(TAG, "‚ùå Bitmap inv√°lido criado: ${bitmap.width}x${bitmap.height}")
                                            processandoFace = false
                                            lastProcessingTime = 0L
                                            imageProxy.close()
                                            return@addOnSuccessListener
                                        }
                                        
                                        imageProxy.close()
                                        
                                        // Processar o bitmap diretamente
                                        processDetectedFace(bitmap, face.boundingBox)
                                    } catch (e: Exception) {
                                        Log.e(TAG, "‚ùå Erro ao converter bitmap", e)
                                        processandoFace = false
                                        lastProcessingTime = 0L
                                        imageProxy.close()
                                    }
                                } else {
                                    // ‚úÖ CORRE√á√ÉO: Fechar proxy se n√£o iniciou processamento
                                    imageProxy.close()
                                }
                            } else {
                                overlay.clear()
                                // ‚úÖ NOVA: Resetar estado se n√£o h√° faces detectadas
                                if (processandoFace) {
                                    Log.w(TAG, "‚ö†Ô∏è Nenhuma face detectada, resetando estado de processamento")
                                    processandoFace = false
                                    lastProcessingTime = 0L
                                    try {
                                        if (::statusText.isInitialized && !isFinishing && !isDestroyed) {
                                            statusText.text = "üì∑ Posicione seu rosto na c√¢mera"
                                        }
                                    } catch (e: Exception) {
                                        Log.e(TAG, "‚ùå Erro ao resetar status: ${e.message}")
                                    }
                                }
                                imageProxy.close()
                            }
                        } catch (e: Exception) {
                            Log.e(TAG, "‚ùå Erro no processamento de faces", e)
                            processandoFace = false
                            imageProxy.close()
                        }
                    }
                    .addOnFailureListener { e ->
                        Log.e(TAG, "‚ùå Erro na detec√ß√£o", e)
                        processandoFace = false
                        imageProxy.close()
                    }
            } else {
                Log.w(TAG, "‚ö†Ô∏è MediaImage √© nulo")
                imageProxy.close()
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro cr√≠tico no processImage", e)
            processandoFace = false
            try {
                imageProxy.close()
            } catch (closeException: Exception) {
                Log.e(TAG, "‚ùå Erro ao fechar imageProxy", closeException)
            }
        }
    }

    private fun processDetectedFace(bitmap: Bitmap, boundingBox: Rect) {
        // ‚úÖ SIMPLES: Verifica√ß√£o b√°sica
        if (processandoFace) {
            return
        }
        
        if (isFinishing || isDestroyed) {
            return
        }
        
        processandoFace = true
        lastProcessingTime = System.currentTimeMillis()
        
        Log.d(TAG, "üîÑ INICIANDO PROCESSAMENTO SIMPLES")
        
        // ‚úÖ SIMPLES: Reset autom√°tico em 5 segundos
        Handler(Looper.getMainLooper()).postDelayed({
            if (processandoFace) {
                Log.w(TAG, "‚ö†Ô∏è RESET POR TIMEOUT")
                processandoFace = false
                lastProcessingTime = 0L
                try {
                    if (::statusText.isInitialized && !isFinishing) {
                        statusText.text = "üì∑ Posicione seu rosto na c√¢mera"
                    }
                } catch (e: Exception) {
                    Log.e(TAG, "Erro no reset: ${e.message}")
                }
            }
        }, 5000)
        
        // ‚úÖ SIMPLES: Processar em background
        CoroutineScope(Dispatchers.IO).launch {
            try {
                // Status simples
                withContext(Dispatchers.Main) {
                    try {
                        if (::statusText.isInitialized && !isFinishing) {
                            statusText.text = "üîç Processando..."
                        }
                    } catch (e: Exception) {
                        Log.e(TAG, "Erro no status: ${e.message}")
                    }
                }

                // Verifica√ß√µes b√°sicas
                if (!modelLoaded || interpreter == null || faceRecognitionHelper == null) {
                    throw Exception("Sistema n√£o carregado")
                }

                // Processar face
                val faceBmp = cropFace(bitmap, boundingBox)
                val resized = Bitmap.createScaledBitmap(faceBmp, modelInputWidth, modelInputHeight, true)
                
                // Converter para tensor
                val inputTensor = convertBitmapToTensorInput(resized)
                val output = Array(1) { FloatArray(modelOutputSize) }
                
                // ‚úÖ SIMPLES: Executar modelo diretamente
                interpreter?.run(inputTensor, output)
                val vetorFacial = output[0]
                
                Log.d(TAG, "‚úÖ Vetor gerado: ${vetorFacial.size}")

                // ‚úÖ SIMPLES: Reconhecer funcion√°rio
                val funcionario = faceRecognitionHelper?.recognizeFace(vetorFacial)
                
                Log.d(TAG, "üîç Resultado: ${funcionario?.nome ?: "n√£o reconhecido"}")
                
                // ‚úÖ SIMPLES: Processar resultado
                withContext(Dispatchers.Main) {
                    try {
                        if (funcionario != null) {
                            Log.d(TAG, "‚úÖ RECONHECIDO: ${funcionario.nome}")
                            
                            // Verificar duplicata simples
                            if (pontoJaRegistrado) {
                                Log.w(TAG, "‚ö†Ô∏è J√° registrado, ignorando")
                                processandoFace = false
                                return@withContext
                            }
                            
                            pontoJaRegistrado = true
                            
                            // ‚úÖ SIMPLES: Registrar ponto diretamente
                            CoroutineScope(Dispatchers.IO).launch {
                                try {
                                    val horario = System.currentTimeMillis()
                                    val formato = SimpleDateFormat("dd/MM/yyyy HH:mm:ss", Locale.getDefault())
                                    val dataFormatada = formato.format(Date(horario))
                                    
                                    val ponto = PontosGenericosEntity(
                                        funcionarioId = funcionario.codigo,
                                        funcionarioNome = funcionario.nome ?: "Funcion√°rio",
                                        funcionarioMatricula = funcionario.matricula ?: "",
                                        funcionarioCpf = funcionario.cpf ?: "",
                                        funcionarioCargo = funcionario.cargo ?: "",
                                        funcionarioSecretaria = funcionario.secretaria ?: "",
                                        funcionarioLotacao = funcionario.lotacao ?: "",
                                        tipoPonto = "PONTO",
                                        dataHora = horario,
                                        fotoBase64 = null
                                    )
                                    
                                    AppDatabase.getInstance(this@PontoActivity).pontosGenericosDao().insert(ponto)
                                    
                                    withContext(Dispatchers.Main) {
                                        try {
                                            Toast.makeText(this@PontoActivity, 
                                                "‚úÖ Ponto registrado!\n${funcionario.nome}\n$dataFormatada", 
                                                Toast.LENGTH_LONG).show()
                                            
                                            // Reset em 15 segundos
                                            Handler(Looper.getMainLooper()).postDelayed({
                                                pontoJaRegistrado = false
                                            }, 15000)
                                            
                                            // Fechar em 3 segundos
                                            Handler(Looper.getMainLooper()).postDelayed({
                                                if (!isFinishing) {
                                                    finish()
                                                }
                                            }, 3000)
                                            
                                        } catch (e: Exception) {
                                            Log.e(TAG, "Erro no toast: ${e.message}")
                                            if (!isFinishing) {
                                                finish()
                                            }
                                        }
                                    }
                                } catch (e: Exception) {
                                    Log.e(TAG, "Erro ao salvar: ${e.message}")
                                    pontoJaRegistrado = false
                                    
                                    withContext(Dispatchers.Main) {
                                        try {
                                            Toast.makeText(this@PontoActivity, "‚ùå Erro ao registrar", Toast.LENGTH_SHORT).show()
                                            statusText.text = "üì∑ Posicione seu rosto na c√¢mera"
                                        } catch (e2: Exception) {
                                            Log.e(TAG, "Erro no fallback: ${e2.message}")
                                        }
                                    }
                                } finally {
                                    processandoFace = false
                                    lastProcessingTime = 0L
                                }
                            }
                        } else {
                            Log.d(TAG, "‚ùå N√ÉO RECONHECIDO")
                            statusText.text = "‚ùå N√£o reconhecido"
                            
                            // Reset em 2 segundos
                            Handler(Looper.getMainLooper()).postDelayed({
                                try {
                                    if (::statusText.isInitialized && !isFinishing) {
                                        statusText.text = "üì∑ Posicione seu rosto na c√¢mera"
                                    }
                                } catch (e: Exception) {
                                    Log.e(TAG, "Erro no reset status: ${e.message}")
                                }
                            }, 2000)
                            
                            processandoFace = false
                            lastProcessingTime = 0L
                        }
                    } catch (e: Exception) {
                        Log.e(TAG, "Erro na UI: ${e.message}")
                        processandoFace = false
                        lastProcessingTime = 0L
                    }
                }

            } catch (e: Exception) {
                Log.e(TAG, "‚ùå ERRO GERAL: ${e.message}")
                
                withContext(Dispatchers.Main) {
                    try {
                        if (::statusText.isInitialized && !isFinishing) {
                            statusText.text = "‚ùå Erro - Tente novamente"
                            
                            Handler(Looper.getMainLooper()).postDelayed({
                                try {
                                    if (::statusText.isInitialized && !isFinishing) {
                                        statusText.text = "üì∑ Posicione seu rosto na c√¢mera"
                                    }
                                } catch (e2: Exception) {
                                    Log.e(TAG, "Erro no reset final: ${e2.message}")
                                }
                            }, 3000)
                        }
                    } catch (e2: Exception) {
                        Log.e(TAG, "Erro na UI final: ${e2.message}")
                    }
                }
                
                processandoFace = false
                lastProcessingTime = 0L
            }
        }
    }

    private suspend fun mostrarFuncionarioReconhecido(funcionario: FuncionariosEntity) {
        try {
            Log.d(TAG, "‚úÖ Registrando ponto para: ${funcionario.nome}")
            
            // ‚úÖ CORRE√á√ÉO: Verificar se o funcion√°rio √© v√°lido
            if (funcionario.codigo.isBlank()) {
                throw IllegalArgumentException("C√≥digo do funcion√°rio est√° vazio")
            }
            
            funcionarioReconhecido = funcionario
            
            // Registrar ponto automaticamente
            val horarioAtual = System.currentTimeMillis()
            val formato = SimpleDateFormat("dd/MM/yyyy HH:mm:ss", Locale.getDefault())
            val dataFormatada = formato.format(Date(horarioAtual))
            
            // Registrar ponto simples sem classifica√ß√£o ENTRADA/SA√çDA
            val tipoPonto = "PONTO"
            
            // ‚úÖ CORRE√á√ÉO: N√ÉO salvar foto para evitar problemas
            val fotoBase64 = null // N√£o salvar foto por enquanto
            
            // ‚úÖ CORRE√á√ÉO: Criar ponto com prote√ß√£o
            val ponto = try {
                PontosGenericosEntity(
                    funcionarioId = funcionario.codigo,
                    funcionarioNome = funcionario.nome ?: "Funcion√°rio",
                    funcionarioMatricula = funcionario.matricula ?: "",
                    funcionarioCpf = funcionario.cpf ?: "",
                    funcionarioCargo = funcionario.cargo ?: "",
                    funcionarioSecretaria = funcionario.secretaria ?: "",
                    funcionarioLotacao = funcionario.lotacao ?: "",
                    tipoPonto = tipoPonto,
                    dataHora = horarioAtual,
                    fotoBase64 = fotoBase64
                )
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao criar entidade de ponto: ${e.message}")
                throw e
            }
            
            // ‚úÖ CORRE√á√ÉO: Inserir no banco com prote√ß√£o
            try {
                AppDatabase.getInstance(this)
                    .pontosGenericosDao()
                    .insert(ponto)
                Log.d(TAG, "üíæ Ponto registrado: ${funcionario.nome} - $dataFormatada")
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao inserir ponto no banco: ${e.message}")
                throw e
            }
            
            // ‚úÖ CORRE√á√ÉO: Salvar ponto para sincroniza√ß√£o com prote√ß√£o
            try {
                val pontoService = PontoSincronizacaoService()
                pontoService.salvarPontoParaSincronizacao(
                    this,
                    funcionario.codigo,
                    funcionario.nome ?: "Funcion√°rio",
                    tipoPonto.lowercase(),
                    fotoBase64
                )
                Log.d(TAG, "‚úÖ Ponto salvo para sincroniza√ß√£o")
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao salvar ponto para sincroniza√ß√£o: ${e.message}")
                // N√£o rethrow - sincroniza√ß√£o n√£o √© cr√≠tica
            }
            
            // ‚úÖ CORRE√á√ÉO: Mostrar confirma√ß√£o simples e fechar IMEDIATAMENTE
            withContext(Dispatchers.Main) {
                try {
                    // ‚úÖ SOLU√á√ÉO DEFINITIVA: Toast simples + fechamento imediato
                    Log.d(TAG, "‚úÖ Ponto salvo com sucesso para ${funcionario.nome}")
                    Toast.makeText(this@PontoActivity, 
                        "‚úÖ Ponto registrado!\n${funcionario.nome}\n$dataFormatada", 
                        Toast.LENGTH_LONG).show()
                    
                    // ‚úÖ CORRE√á√ÉO: Fechar IMEDIATAMENTE ap√≥s 2 segundos
                    Handler(Looper.getMainLooper()).postDelayed({
                        try {
                            Log.d(TAG, "üîö Fechando activity ap√≥s ponto registrado")
                            if (!isFinishing && !isDestroyed) {
                                finish()
                            } else {
                                Log.w(TAG, "‚ö†Ô∏è Activity j√° finalizada, n√£o fechando")
                            }
                        } catch (e: Exception) {
                            Log.e(TAG, "‚ùå Erro ao fechar: ${e.message}")
                            // For√ßa sa√≠da do processo se necess√°rio
                            android.os.Process.killProcess(android.os.Process.myPid())
                        }
                    }, 2000)
                    
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå Erro ao mostrar toast: ${e.message}")
                    // Fechar imediatamente se der erro
                    try {
                        if (!isFinishing && !isDestroyed) {
                            finish()
                        } else {
                            Log.w(TAG, "‚ö†Ô∏è Activity j√° finalizada, n√£o fechando")
                        }
                    } catch (e2: Exception) {
                        Log.e(TAG, "‚ùå Erro cr√≠tico: ${e2.message}")
                        android.os.Process.killProcess(android.os.Process.myPid())
                    }
                }
            }
            
            // ‚úÖ CORRE√á√ÉO: N√ÉO chamar resetarAposPonto aqui - dialog vai gerenciar o fechamento
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro cr√≠tico ao registrar ponto: ${e.message}", e)
            
            // ‚úÖ CORRE√á√ÉO: Fallback para evitar crash
            withContext(Dispatchers.Main) {
                try {
                    Toast.makeText(this@PontoActivity, 
                        "‚ùå Erro ao registrar ponto\nTente novamente", 
                        Toast.LENGTH_LONG).show()
                    statusText.text = "üì∑ Posicione seu rosto na c√¢mera"
                } catch (e2: Exception) {
                    Log.e(TAG, "‚ùå Erro no fallback: ${e2.message}")
                }
            }
        } finally {
            processandoFace = false
        }
    }

    private fun mostrarFuncionarioNaoReconhecido() {
        CoroutineScope(Dispatchers.IO).launch {
            try {
                val db = AppDatabase.getInstance(this@PontoActivity)
                val funcionarios = db.usuariosDao().getUsuario()
                
                // Verificar se h√° pelo menos uma face cadastrada
                var temFacesCadastradas = false
                for (funcionario in funcionarios) {
                    val face = db.faceDao().getByFuncionarioId(funcionario.id.toString())
                    if (face != null) {
                        temFacesCadastradas = true
                        break
                    }
                }
                
                withContext(Dispatchers.Main) {
                    statusText.text = if (funcionarios.isEmpty()) {
                        "‚ùå Nenhum funcion√°rio cadastrado\nRegistre funcion√°rios primeiro"
                    } else if (!temFacesCadastradas) {
                        "‚ùå Nenhum rosto cadastrado\nRegistre rostos via menu principal"
                    } else {
                        "‚ùå Funcion√°rio n√£o reconhecido\nTente novamente ou cadastre novo rosto"
                    }
                    
                    funcionarioInfo.visibility = View.GONE
                    
                    // Resetar ap√≥s 5 segundos para dar tempo de ler
                    statusText.postDelayed({
                        statusText.text = "üì∑ Posicione seu rosto na c√¢mera"
                        processandoFace = false
                    }, 5000)
                }
                
            } catch (e: Exception) {
                withContext(Dispatchers.Main) {
                    statusText.text = "‚ùå Erro no sistema\nTente novamente"
                    funcionarioInfo.visibility = View.GONE
                    
                    statusText.postDelayed({
                        statusText.text = "üì∑ Posicione seu rosto na c√¢mera"
                        processandoFace = false
                    }, 3000)
                }
            }
        }
    }



    private fun mostrarConfirmacaoPonto(funcionario: FuncionariosEntity, tipoPonto: String, horario: String) {
        try {
            Log.d(TAG, "üéâ Mostrando confirma√ß√£o de ponto para ${funcionario.nome}")
            
            // ‚úÖ CORRE√á√ÉO: Verificar se a activity ainda √© v√°lida
            if (isFinishing || isDestroyed) {
                Log.w(TAG, "‚ö†Ô∏è Activity finalizada, cancelando confirma√ß√£o")
                return
            }
            
            // ‚úÖ ABORDAGEM MAIS SIMPLES: Usar AlertDialog que √© mais est√°vel
            try {
                val builder = AlertDialog.Builder(this)
                builder.setTitle("‚úÖ Ponto Registrado!")
                builder.setMessage("üë§ ${funcionario.nome}\nüïê $horario\n\n‚úÖ Ponto salvo com sucesso!")
                builder.setIcon(android.R.drawable.ic_dialog_info)
                builder.setCancelable(false)
                
                builder.setPositiveButton("OK") { dialog, _ ->
                    try {
                        Log.d(TAG, "üëÜ Confirma√ß√£o OK pressionada - fechando app")
                        dialog.dismiss()
                        // ‚úÖ CORRE√á√ÉO: Fechar imediatamente sem delay
                        try {
                            if (!isFinishing && !isDestroyed) {
                                Log.d(TAG, "üîö Finalizando activity ap√≥s confirma√ß√£o")
                                finish()
                            }
                        } catch (e: Exception) {
                            Log.e(TAG, "‚ùå Erro ao fechar activity: ${e.message}")
                        }
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Erro no bot√£o OK: ${e.message}")
                        try {
                            if (!isFinishing && !isDestroyed) {
                                finish()
                            }
                        } catch (e2: Exception) {
                            Log.e(TAG, "‚ùå Erro cr√≠tico ao fechar: ${e2.message}")
                        }
                    }
                }
                
                // ‚úÖ CORRE√á√ÉO: Verificar novamente antes de criar o dialog
                if (!isFinishing && !isDestroyed) {
                    val dialog = builder.create()
                    dialog.show()
                    
                    // Auto-fechar ap√≥s 5 segundos como backup
                    Handler(Looper.getMainLooper()).postDelayed({
                        try {
                            if (dialog.isShowing && !isFinishing && !isDestroyed) {
                                Log.d(TAG, "‚è∞ Auto-fechando dialog e app ap√≥s 5 segundos")
                                dialog.dismiss()
                                // ‚úÖ CORRE√á√ÉO: Fechar imediatamente sem delay adicional
                                try {
                                    if (!isFinishing && !isDestroyed) {
                                        Log.d(TAG, "üîö Finalizando activity automaticamente")
                                        finish()
                                    }
                                } catch (e: Exception) {
                                    Log.e(TAG, "‚ùå Erro no auto-close finish: ${e.message}")
                                }
                            }
                        } catch (e: Exception) {
                            Log.e(TAG, "‚ùå Erro no auto-close dialog: ${e.message}")
                        }
                    }, 5000)
                    
                    Log.d(TAG, "‚úÖ Dialog de confirma√ß√£o exibido com sucesso")
                } else {
                    Log.w(TAG, "‚ö†Ô∏è Activity finalizada antes de mostrar dialog")
                    throw IllegalStateException("Activity finalizada")
                }
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao criar dialog: ${e.message}")
                throw e
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao mostrar confirma√ß√£o", e)
            
            // ‚úÖ FALLBACK: Toast simples e fechar imediatamente
            try {
                if (!isFinishing && !isDestroyed) {
                    Toast.makeText(this, "‚úÖ Ponto registrado!\n${funcionario.nome}\n$horario", Toast.LENGTH_SHORT).show()
                    
                    // ‚úÖ CORRE√á√ÉO: Fechar imediatamente ap√≥s toast
                    Log.d(TAG, "üîö Finalizando activity via fallback")
                    finish()
                } else {
                    Log.w(TAG, "‚ö†Ô∏è Activity finalizada, n√£o exibindo fallback")
                }
            } catch (e2: Exception) {
                Log.e(TAG, "‚ùå Erro no fallback: ${e2.message}")
                // √öltimo recurso: apenas fechar
                try {
                    if (!isFinishing && !isDestroyed) {
                        finish()
                    }
                } catch (e3: Exception) {
                    Log.e(TAG, "‚ùå Erro cr√≠tico final: ${e3.message}")
                }
            }
        }
    }
    
    private fun cancelarPonto() {
        funcionarioReconhecido = null
        funcionarioInfo.visibility = View.GONE
        statusText.text = "üì∑ Posicione seu rosto na c√¢mera"
        processandoFace = false
    }

    private fun dpToPx(dp: Int): Int {
        return (dp * resources.displayMetrics.density).toInt()
    }
    
    private fun getStatusBarHeight(): Int {
        var result = 0
        val resourceId = resources.getIdentifier("status_bar_height", "dimen", "android")
        if (resourceId > 0) {
            result = resources.getDimensionPixelSize(resourceId)
        }
        return result
    }
    
        private fun convertBitmapToTensorInput(bitmap: Bitmap): ByteBuffer {
        try {
            // ‚úÖ OTIMIZA√á√ÉO: Verifica√ß√µes m√≠nimas e r√°pidas
            if (bitmap.isRecycled || bitmap.width <= 0 || bitmap.height <= 0) {
                throw IllegalStateException("Bitmap inv√°lido")
            }
            
            val inputSize = modelInputWidth // 112
            val bufferSize = 4 * inputSize * inputSize * 3
            val byteBuffer = ByteBuffer.allocateDirect(bufferSize)
            byteBuffer.order(ByteOrder.nativeOrder())

            // ‚úÖ OTIMIZA√á√ÉO: Redimensionamento mais eficiente
            val resizedBitmap = if (bitmap.width != inputSize || bitmap.height != inputSize) {
                Bitmap.createScaledBitmap(bitmap, inputSize, inputSize, false) // false = mais r√°pido
            } else {
                bitmap
            }
            
            // ‚úÖ OTIMIZA√á√ÉO: Verifica√ß√£o simples
            if (resizedBitmap.isRecycled) {
                throw IllegalStateException("Redimensionamento falhou")
            }
            
            val intValues = IntArray(inputSize * inputSize)
            resizedBitmap.getPixels(intValues, 0, inputSize, 0, 0, inputSize, inputSize)

            // ‚úÖ OTIMIZA√á√ÉO: Processamento de pixels mais r√°pido
            for (pixel in intValues) {
                // Normalizar para [-1, 1] de forma mais eficiente
                val r = ((pixel shr 16) and 0xFF) / 127.5f - 1.0f
                val g = ((pixel shr 8) and 0xFF) / 127.5f - 1.0f
                val b = (pixel and 0xFF) / 127.5f - 1.0f

                byteBuffer.putFloat(r)
                byteBuffer.putFloat(g)
                byteBuffer.putFloat(b)
            }
            
            // ‚úÖ OTIMIZA√á√ÉO: Limpeza eficiente
            if (resizedBitmap != bitmap && !resizedBitmap.isRecycled) {
                resizedBitmap.recycle()
            }

            return byteBuffer
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro na convers√£o: ${e.message}")
            throw e
        }
    }
    

    
    private fun createTestEmployeeIfNeeded() {
        CoroutineScope(Dispatchers.IO).launch {
            try {
                val db = AppDatabase.getInstance(this@PontoActivity)
                val funcionarioDao = db.usuariosDao()
                
                // Verificar se h√° funcion√°rios cadastrados
                val funcionarios = funcionarioDao.getUsuario()
                
                if (funcionarios.isEmpty()) {
                    Log.d(TAG, "üìù Criando funcion√°rio de teste...")
                    
                    // Criar funcion√°rio de teste
                    val funcionarioTeste = FuncionariosEntity(
                        id = 1,
                        codigo = "TEST001",
                        nome = "Funcion√°rio Teste",
                        ativo = 1
                    )
                    
                    funcionarioDao.insert(funcionarioTeste)
                    
                    Log.d(TAG, "‚úÖ Funcion√°rio de teste criado: ${funcionarioTeste.nome}")
                    
                    withContext(Dispatchers.Main) {
                        Toast.makeText(this@PontoActivity, 
                            "üë§ Funcion√°rio de teste criado!\nPrimeiro registre seu rosto via menu principal", 
                            Toast.LENGTH_LONG).show()
                    }
                } else {
                    Log.d(TAG, "üë• ${funcionarios.size} funcion√°rio(s) j√° cadastrado(s)")
                }
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro ao criar funcion√°rio de teste: ${e.message}")
            }
        }
    }

    private suspend fun verificarIntegridadeFaces() {
        try {
            Log.d(TAG, "üîç Verificando integridade das faces...")
            
            // Verificar integridade
            faceRecognitionHelper?.verificarIntegridadeFaces()
            
            // Limpar faces duplicadas
            faceRecognitionHelper?.limparFacesDuplicadas()
            
            Log.d(TAG, "‚úÖ Verifica√ß√£o de integridade conclu√≠da")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro na verifica√ß√£o de integridade: ${e.message}", e)
        }
    }
    
    /**
     * ‚úÖ NOVA FUN√á√ÉO: Verifica e corrige problemas de reconhecimento
     */
    private suspend fun verificarECorrigirProblemasReconhecimento() {
        try {
            Log.d(TAG, "üîß Verificando e corrigindo problemas de reconhecimento...")
            
            // Executar verifica√ß√£o completa
            faceRecognitionHelper?.verificarECorrigirProblemasReconhecimento()
            
            // Listar problemas encontrados
            val problemas = faceRecognitionHelper?.listarFuncionariosComProblemas()
            if (!problemas.isNullOrEmpty()) {
                Log.w(TAG, "‚ö†Ô∏è Problemas encontrados:")
                problemas.forEach { problema ->
                    Log.w(TAG, "   $problema")
                }
            } else {
                Log.d(TAG, "‚úÖ Nenhum problema encontrado")
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao verificar problemas: ${e.message}")
        }
    }
    
    /**
     * ‚úÖ NOVA FUN√á√ÉO: Resetar estado de reconhecimento
     */
    private fun resetarEstadoReconhecimento() {
        try {
            Log.d(TAG, "üîÑ === RESETANDO ESTADO DE RECONHECIMENTO ===")
            
            // ‚úÖ CORRE√á√ÉO: Verificar se activity ainda √© v√°lida
            if (isFinishing || isDestroyed) {
                Log.w(TAG, "‚ö†Ô∏è Activity finalizada, cancelando reset")
                return
            }
            
            funcionarioReconhecido = null
            processandoFace = false
            lastProcessingTime = 0L // ‚úÖ NOVA: Resetar tempo de processamento
            pontoJaRegistrado = false // ‚úÖ NOVA: Permitir novos registros
            ultimoFuncionarioReconhecido = null // ‚úÖ NOVA: Limpar √∫ltimo funcion√°rio
            currentFaceBitmap = null
            
            // ‚úÖ CORRE√á√ÉO: Verificar se as views est√£o inicializadas E activity v√°lida
            try {
                if (::statusText.isInitialized && !isFinishing && !isDestroyed) {
                    statusText.text = "üì∑ Posicione seu rosto na c√¢mera"
                } else {
                    Log.w(TAG, "‚ö†Ô∏è statusText n√£o dispon√≠vel para reset")
                }
                
                if (::funcionarioInfo.isInitialized && !isFinishing && !isDestroyed) {
                    funcionarioInfo.visibility = View.GONE
                } else {
                    Log.w(TAG, "‚ö†Ô∏è funcionarioInfo n√£o dispon√≠vel para reset")
                }
                
                // ‚úÖ CORRE√á√ÉO: Limpar overlay tamb√©m
                if (::overlay.isInitialized && !isFinishing && !isDestroyed) {
                    overlay.clear()
                }
            } catch (e: Exception) {
                Log.w(TAG, "‚ö†Ô∏è Erro ao resetar views: ${e.message}")
            }
            
            Log.d(TAG, "‚úÖ Estado resetado com sucesso")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro cr√≠tico no reset: ${e.message}", e)
        }
    }
    
    /**
     * ‚úÖ NOVA FUN√á√ÉO: For√ßar reset do estado (para casos de emerg√™ncia)
     */
    private fun forcarResetEstado() {
        try {
            Log.d(TAG, "üö® === FOR√áANDO RESET DO ESTADO ===")
            processandoFace = false
            lastProcessingTime = 0L // ‚úÖ NOVA: Resetar tempo de processamento
            pontoJaRegistrado = false // ‚úÖ NOVA: Permitir novos registros
            ultimoFuncionarioReconhecido = null // ‚úÖ NOVA: Limpar √∫ltimo funcion√°rio
            funcionarioReconhecido = null
            currentFaceBitmap = null
            
            // Resetar UI
            try {
                if (::statusText.isInitialized && !isFinishing && !isDestroyed) {
                    statusText.text = "üì∑ Posicione seu rosto na c√¢mera"
                }
                if (::funcionarioInfo.isInitialized && !isFinishing && !isDestroyed) {
                    funcionarioInfo.visibility = View.GONE
                }
            } catch (e: Exception) {
                Log.w(TAG, "‚ö†Ô∏è Erro ao resetar UI: ${e.message}")
            }
            
            Log.d(TAG, "‚úÖ Reset for√ßado conclu√≠do")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro no reset for√ßado: ${e.message}")
        }
    }
    
    /**
     * ‚úÖ FUN√á√ÉO REMOVIDA: resetarAposPonto causava conflito
     * Agora o dialog gerencia o fechamento da activity diretamente
     */

    private fun allPermissionsGranted() = REQUIRED_PERMISSIONS.all {
        ContextCompat.checkSelfPermission(baseContext, it) == PackageManager.PERMISSION_GRANTED
    }

    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == REQUEST_CODE_PERMISSIONS) {
            if (allPermissionsGranted()) {
                startCamera()
            } else {
                Toast.makeText(this, "Permiss√µes de c√¢mera necess√°rias", Toast.LENGTH_LONG).show()
                finish()
            }
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        try {
            interpreter?.close()
            interpreter = null
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao fechar interpreter: ${e.message}")
        }
    }
    
    override fun onPause() {
        super.onPause()
        // ‚úÖ CORRE√á√ÉO: N√ÉO pausar processamento para evitar interrup√ß√£o
        Log.d(TAG, "üì± onPause - mantendo processamento ativo")
    }
    
    override fun onResume() {
        super.onResume()
        // ‚úÖ CORRE√á√ÉO: Resetar estado completo quando activity volta
        Log.d(TAG, "üì± onResume - resetando estado completo")
        
        // ‚úÖ CORRE√á√ÉO: Reset imediato se processandoFace est√° travado
        if (processandoFace) {
            Log.w(TAG, "‚ö†Ô∏è processandoFace travado no onResume, resetando imediatamente")
            forcarResetEstado()
        }
        
        // ‚úÖ CORRE√á√ÉO: Aguardar um pouco antes de resetar para evitar conflitos
        Handler(Looper.getMainLooper()).postDelayed({
            try {
                forcarResetEstado()
                Log.d(TAG, "üìä Estado no onResume: processandoFace = $processandoFace")
                
                // ‚úÖ CORRE√á√ÉO: Verificar se o modelo est√° carregado
                if (!modelLoaded) {
                    Log.w(TAG, "‚ö†Ô∏è Modelo n√£o carregado no onResume, recarregando...")
                    loadTensorFlowModel()
                }
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erro no onResume: ${e.message}")
            }
        }, 500) // Aguardar 500ms
    }
} 